
Smart Lighting and Time Control System using RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08008028  08008028  00009028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0000955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008560  08008560  00009560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008564  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005428  20000080  080085e4  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054a8  080085e4  0000a4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fbc  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380b  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00023878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f52  00000000  00000000  00024c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f48  00000000  00000000  00025b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ea7  00000000  00000000  0003fada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eac6  00000000  00000000  00059981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d0  00000000  00000000  000f848c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000fdb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008010 	.word	0x08008010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008010 	.word	0x08008010

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LedEffectStop>:

GPIO_TypeDef* LEDPort[4] = {LED1_PORT,LED2_PORT,LED3_PORT,LED4_PORT};
uint16_t LEDPin[4] = {LED1_PIN,LED2_PIN,LED3_PIN,LED4_PIN};

void LedEffectStop(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	uint8_t Local_u8Count;
	for(Local_u8Count=0;Local_u8Count<4;Local_u8Count++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	e00e      	b.n	80005ca <LedEffectStop+0x2a>
	{
		xTimerStop(HandleLedTimer[Local_u8Count],portMAX_DELAY);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <LedEffectStop+0x3c>)
 80005b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2200      	movs	r2, #0
 80005be:	2103      	movs	r1, #3
 80005c0:	f006 f994 	bl	80068ec <xTimerGenericCommand>
	for(Local_u8Count=0;Local_u8Count<4;Local_u8Count++)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	3301      	adds	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d9ed      	bls.n	80005ac <LedEffectStop+0xc>
	}
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000190 	.word	0x20000190

080005e0 <LedEffectStart>:

void LedEffectStart(uint8_t Copy_u8EffNum)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	LedEffectStop();
 80005ea:	f7ff ffd9 	bl	80005a0 <LedEffectStop>
	xTimerStart(HandleLedTimer[Copy_u8EffNum-1],portMAX_DELAY);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <LedEffectStart+0x38>)
 80005f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005f8:	f005 f8bc 	bl	8005774 <xTaskGetTickCount>
 80005fc:	4602      	mov	r2, r0
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	2101      	movs	r1, #1
 8000608:	4620      	mov	r0, r4
 800060a:	f006 f96f 	bl	80068ec <xTimerGenericCommand>
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bd90      	pop	{r4, r7, pc}
 8000616:	bf00      	nop
 8000618:	20000190 	.word	0x20000190

0800061c <LedEffectAction1>:

void LedEffectAction1(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	uint8_t Local_u8Count;
	for(Local_u8Count=0;Local_u8Count<4;Local_u8Count++)
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e00e      	b.n	8000646 <LedEffectAction1+0x2a>
	{
		HAL_GPIO_TogglePin(LEDPort[Local_u8Count], LEDPin[Local_u8Count]);
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <LedEffectAction1+0x3c>)
 800062c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	490a      	ldr	r1, [pc, #40]	@ (800065c <LedEffectAction1+0x40>)
 8000634:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000638:	4619      	mov	r1, r3
 800063a:	4610      	mov	r0, r2
 800063c:	f001 fcc1 	bl	8001fc2 <HAL_GPIO_TogglePin>
	for(Local_u8Count=0;Local_u8Count<4;Local_u8Count++)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3301      	adds	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b03      	cmp	r3, #3
 800064a:	d9ed      	bls.n	8000628 <LedEffectAction1+0xc>
	}
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	20000010 	.word	0x20000010

08000660 <LedEffectAction2>:

void LedEffectAction2(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	static uint8_t Local_u8Flag=0;
	if(Local_u8Flag==0)
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <LedEffectAction2+0x28>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <LedEffectAction2+0x12>
	{
		TurnOnEvenLed();
 800066c:	f000 f870 	bl	8000750 <TurnOnEvenLed>
 8000670:	e001      	b.n	8000676 <LedEffectAction2+0x16>
	}
	else
	{
		TurnOnOddLed();
 8000672:	f000 f889 	bl	8000788 <TurnOnOddLed>
	}
	Local_u8Flag ^= 1;
 8000676:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <LedEffectAction2+0x28>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f083 0301 	eor.w	r3, r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b01      	ldr	r3, [pc, #4]	@ (8000688 <LedEffectAction2+0x28>)
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000009c 	.word	0x2000009c

0800068c <LedEffectAction3>:

void LedEffectAction3(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* shift left*/
	static uint8_t Local_u8PinNum=0;
	LedControl(1<<Local_u8PinNum);
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <LedEffectAction3+0x34>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	2301      	movs	r3, #1
 8000698:	4093      	lsls	r3, r2
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f82d 	bl	80006fc <LedControl>
	Local_u8PinNum++;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <LedEffectAction3+0x34>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <LedEffectAction3+0x34>)
 80006ac:	701a      	strb	r2, [r3, #0]
	Local_u8PinNum %=4;
 80006ae:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <LedEffectAction3+0x34>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b01      	ldr	r3, [pc, #4]	@ (80006c0 <LedEffectAction3+0x34>)
 80006ba:	701a      	strb	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000009d 	.word	0x2000009d

080006c4 <LedEffectAction4>:

void LedEffectAction4(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* shift right */
	static uint8_t Local_u8PinNum=0;
	LedControl(8>>Local_u8PinNum);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <LedEffectAction4+0x34>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	2308      	movs	r3, #8
 80006d0:	4113      	asrs	r3, r2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f811 	bl	80006fc <LedControl>
	Local_u8PinNum++;
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <LedEffectAction4+0x34>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <LedEffectAction4+0x34>)
 80006e4:	701a      	strb	r2, [r3, #0]
	Local_u8PinNum %=4;
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <LedEffectAction4+0x34>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f003 0303 	and.w	r3, r3, #3
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b01      	ldr	r3, [pc, #4]	@ (80006f8 <LedEffectAction4+0x34>)
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000009e 	.word	0x2000009e

080006fc <LedControl>:

void LedControl(uint8_t Copy_u8LedNum)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Count;
	for(Local_u8Count=0;Local_u8Count<4;Local_u8Count++)
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e015      	b.n	8000738 <LedControl+0x3c>
	{
		HAL_GPIO_WritePin(LEDPort[Local_u8Count], LEDPin[Local_u8Count],(Copy_u8LedNum>>Local_u8Count)&1);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <LedControl+0x4c>)
 8000710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <LedControl+0x50>)
 8000718:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800071c:	79fa      	ldrb	r2, [r7, #7]
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	fa42 f303 	asr.w	r3, r2, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	f001 fc2f 	bl	8001f90 <HAL_GPIO_WritePin>
	for(Local_u8Count=0;Local_u8Count<4;Local_u8Count++)
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d9e6      	bls.n	800070c <LedControl+0x10>
	}
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000010 	.word	0x20000010

08000750 <TurnOnEvenLed>:

void TurnOnEvenLed(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	@ 0x40
 8000758:	480a      	ldr	r0, [pc, #40]	@ (8000784 <TurnOnEvenLed+0x34>)
 800075a:	f001 fc19 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_PORT, LED2_PIN, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4808      	ldr	r0, [pc, #32]	@ (8000784 <TurnOnEvenLed+0x34>)
 8000764:	f001 fc14 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_PORT, LED3_PIN, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <TurnOnEvenLed+0x34>)
 8000770:	f001 fc0e 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_PORT, LED4_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077a:	4802      	ldr	r0, [pc, #8]	@ (8000784 <TurnOnEvenLed+0x34>)
 800077c:	f001 fc08 	bl	8001f90 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020800 	.word	0x40020800

08000788 <TurnOnOddLed>:

void TurnOnOddLed(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2140      	movs	r1, #64	@ 0x40
 8000790:	480a      	ldr	r0, [pc, #40]	@ (80007bc <TurnOnOddLed+0x34>)
 8000792:	f001 fbfd 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_PORT, LED2_PIN, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2180      	movs	r1, #128	@ 0x80
 800079a:	4808      	ldr	r0, [pc, #32]	@ (80007bc <TurnOnOddLed+0x34>)
 800079c:	f001 fbf8 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_PORT, LED3_PIN, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <TurnOnOddLed+0x34>)
 80007a8:	f001 fbf2 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_PORT, LED4_PIN, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007b2:	4802      	ldr	r0, [pc, #8]	@ (80007bc <TurnOnOddLed+0x34>)
 80007b4:	f001 fbec 	bl	8001f90 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40020800 	.word	0x40020800

080007c0 <LedEffectCallBackFun>:


void LedEffectCallBackFun(TimerHandle_t xTimer )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ID;
	Local_u8ID = pvTimerGetTimerID(xTimer);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f006 fb35 	bl	8006e38 <pvTimerGetTimerID>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
	switch(Local_u8ID)
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d816      	bhi.n	8000808 <LedEffectCallBackFun+0x48>
 80007da:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <LedEffectCallBackFun+0x20>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f1 	.word	0x080007f1
 80007e4:	080007f7 	.word	0x080007f7
 80007e8:	080007fd 	.word	0x080007fd
 80007ec:	08000803 	.word	0x08000803
	{
	case 1 : LedEffectAction1(); break;
 80007f0:	f7ff ff14 	bl	800061c <LedEffectAction1>
 80007f4:	e008      	b.n	8000808 <LedEffectCallBackFun+0x48>
	case 2 : LedEffectAction2(); break;
 80007f6:	f7ff ff33 	bl	8000660 <LedEffectAction2>
 80007fa:	e005      	b.n	8000808 <LedEffectCallBackFun+0x48>
	case 3 : LedEffectAction3(); break;
 80007fc:	f7ff ff46 	bl	800068c <LedEffectAction3>
 8000800:	e002      	b.n	8000808 <LedEffectCallBackFun+0x48>
	case 4 : LedEffectAction4(); break;
 8000802:	f7ff ff5f 	bl	80006c4 <LedEffectAction4>
 8000806:	bf00      	nop
	}
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <RTC_voidShowTimeDate>:
 */
#include "main.h"


void RTC_voidShowTimeDate(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	@ 0x38
 8000814:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef Local_RTCTime;

	static char ShowDate[50];
	static char ShowTime[50];

	char* Local_pData = ShowDate;
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <RTC_voidShowTimeDate+0xa8>)
 8000818:	60bb      	str	r3, [r7, #8]
	char* Local_pTime = ShowTime;
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <RTC_voidShowTimeDate+0xac>)
 800081c:	607b      	str	r3, [r7, #4]

	char* Local_pTimeformat;

	HAL_RTC_GetTime(&hrtc, &Local_RTCTime,RTC_FORMAT_BIN);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4826      	ldr	r0, [pc, #152]	@ (80008c0 <RTC_voidShowTimeDate+0xb0>)
 8000828:	f002 fa7b 	bl	8002d22 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Local_RTCDate,RTC_FORMAT_BIN);
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4822      	ldr	r0, [pc, #136]	@ (80008c0 <RTC_voidShowTimeDate+0xb0>)
 8000836:	f002 fad2 	bl	8002dde <HAL_RTC_GetDate>

	if(Local_RTCTime.TimeFormat==RTC_HOURFORMAT12_AM)
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <RTC_voidShowTimeDate+0x36>
	{
		 Local_pTimeformat="AM";
 8000840:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <RTC_voidShowTimeDate+0xb4>)
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
 8000844:	e001      	b.n	800084a <RTC_voidShowTimeDate+0x3a>
	}
	else
	{
		 Local_pTimeformat="PM";
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <RTC_voidShowTimeDate+0xb8>)
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	sprintf((char*)ShowDate,"%s : %02d : %02d : %02d ",
		"\r\ncurrent data",Local_RTCDate.Date,Local_RTCDate.Month,((Local_RTCDate.Year)+2000));
 800084a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
	sprintf((char*)ShowDate,"%s : %02d : %02d : %02d ",
 800084e:	4619      	mov	r1, r3
		"\r\ncurrent data",Local_RTCDate.Date,Local_RTCDate.Month,((Local_RTCDate.Year)+2000));
 8000850:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
	sprintf((char*)ShowDate,"%s : %02d : %02d : %02d ",
 8000854:	461a      	mov	r2, r3
		"\r\ncurrent data",Local_RTCDate.Date,Local_RTCDate.Month,((Local_RTCDate.Year)+2000));
 8000856:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
	sprintf((char*)ShowDate,"%s : %02d : %02d : %02d ",
 800085a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	9200      	str	r2, [sp, #0]
 8000862:	460b      	mov	r3, r1
 8000864:	4a19      	ldr	r2, [pc, #100]	@ (80008cc <RTC_voidShowTimeDate+0xbc>)
 8000866:	491a      	ldr	r1, [pc, #104]	@ (80008d0 <RTC_voidShowTimeDate+0xc0>)
 8000868:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <RTC_voidShowTimeDate+0xa8>)
 800086a:	f006 ff31 	bl	80076d0 <siprintf>
	xQueueSend(Q_Print, &Local_pData, portMAX_DELAY);
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <RTC_voidShowTimeDate+0xc4>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f107 0108 	add.w	r1, r7, #8
 8000876:	2300      	movs	r3, #0
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	f004 f83e 	bl	80048fc <xQueueGenericSend>

	sprintf((char*)ShowTime,"%s : %02d : %02d : %02d [%s]",
			"\r\ncurrent time",Local_RTCTime.Hours,Local_RTCTime.Minutes,Local_RTCTime.Seconds,Local_pTimeformat);
 8000880:	7b3b      	ldrb	r3, [r7, #12]
	sprintf((char*)ShowTime,"%s : %02d : %02d : %02d [%s]",
 8000882:	4618      	mov	r0, r3
			"\r\ncurrent time",Local_RTCTime.Hours,Local_RTCTime.Minutes,Local_RTCTime.Seconds,Local_pTimeformat);
 8000884:	7b7b      	ldrb	r3, [r7, #13]
	sprintf((char*)ShowTime,"%s : %02d : %02d : %02d [%s]",
 8000886:	461a      	mov	r2, r3
			"\r\ncurrent time",Local_RTCTime.Hours,Local_RTCTime.Minutes,Local_RTCTime.Seconds,Local_pTimeformat);
 8000888:	7bbb      	ldrb	r3, [r7, #14]
	sprintf((char*)ShowTime,"%s : %02d : %02d : %02d [%s]",
 800088a:	4619      	mov	r1, r3
 800088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088e:	9302      	str	r3, [sp, #8]
 8000890:	9101      	str	r1, [sp, #4]
 8000892:	9200      	str	r2, [sp, #0]
 8000894:	4603      	mov	r3, r0
 8000896:	4a10      	ldr	r2, [pc, #64]	@ (80008d8 <RTC_voidShowTimeDate+0xc8>)
 8000898:	4910      	ldr	r1, [pc, #64]	@ (80008dc <RTC_voidShowTimeDate+0xcc>)
 800089a:	4808      	ldr	r0, [pc, #32]	@ (80008bc <RTC_voidShowTimeDate+0xac>)
 800089c:	f006 ff18 	bl	80076d0 <siprintf>
	xQueueSend(Q_Print, &Local_pTime, portMAX_DELAY);
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <RTC_voidShowTimeDate+0xc4>)
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	1d39      	adds	r1, r7, #4
 80008a6:	2300      	movs	r3, #0
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	f004 f826 	bl	80048fc <xQueueGenericSend>
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	20000108 	.word	0x20000108
 80008c4:	08008028 	.word	0x08008028
 80008c8:	0800802c 	.word	0x0800802c
 80008cc:	08008030 	.word	0x08008030
 80008d0:	08008040 	.word	0x08008040
 80008d4:	20000184 	.word	0x20000184
 80008d8:	0800805c 	.word	0x0800805c
 80008dc:	0800806c 	.word	0x0800806c

080008e0 <RTC_ConfigTime>:

void RTC_ConfigTime(uint8_t Copy_u8Hour,uint8_t Copy_u8Min,uint8_t Copy_u8Sec)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	460b      	mov	r3, r1
 80008ec:	71bb      	strb	r3, [r7, #6]
 80008ee:	4613      	mov	r3, r2
 80008f0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef Local_RTCTime;
	Local_RTCTime.Hours=Copy_u8Hour;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	733b      	strb	r3, [r7, #12]
	Local_RTCTime.Minutes=Copy_u8Min;
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	737b      	strb	r3, [r7, #13]
	Local_RTCTime.Seconds=Copy_u8Sec;
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	73bb      	strb	r3, [r7, #14]
	HAL_RTC_SetTime(&hrtc, &Local_RTCTime,RTC_FORMAT_BIN);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	4803      	ldr	r0, [pc, #12]	@ (8000914 <RTC_ConfigTime+0x34>)
 8000908:	f002 f971 	bl	8002bee <HAL_RTC_SetTime>
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000108 	.word	0x20000108

08000918 <RTC_u8IsRTCTimeCigValid>:
	Local_RTCDate.Year=Copy_u8Your;
	HAL_RTC_SetDate(&hrtc, &Local_RTCDate,RTC_FORMAT_BIN);
}

uint8_t RTC_u8IsRTCTimeCigValid(uint8_t Copy_u8Hour,uint8_t Copy_u8Min,uint8_t Copy_u8Sec)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	4613      	mov	r3, r2
 8000928:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ValidState;
	if((Copy_u8Hour>12) || (Copy_u8Min>59) || (Copy_u8Sec>59))
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b0c      	cmp	r3, #12
 800092e:	d805      	bhi.n	800093c <RTC_u8IsRTCTimeCigValid+0x24>
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	2b3b      	cmp	r3, #59	@ 0x3b
 8000934:	d802      	bhi.n	800093c <RTC_u8IsRTCTimeCigValid+0x24>
 8000936:	797b      	ldrb	r3, [r7, #5]
 8000938:	2b3b      	cmp	r3, #59	@ 0x3b
 800093a:	d902      	bls.n	8000942 <RTC_u8IsRTCTimeCigValid+0x2a>
	{
		Local_u8ValidState=0;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e001      	b.n	8000946 <RTC_u8IsRTCTimeCigValid+0x2e>
	}
	else
	{
		Local_u8ValidState=1;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ValidState;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <MenuTask>:
static void ExtractCommand(Command_t* Copy_Command);

const char* MsgInvaild = "-------> invaild Option <--------\r\n ";

void MenuTask(void * pvParameters)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
	const char* MsgMenu = "\r\n======================================\r\n"
 800095c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <MenuTask+0xc4>)
 800095e:	613b      	str	r3, [r7, #16]
                       "Enter your choose here : ";
	Command_t* Local_CMD;
	uint32_t Local_u32CmdAddress;
	while(1)
	{
		xQueueSend(Q_Print,(void*)&MsgMenu,portMAX_DELAY);
 8000960:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <MenuTask+0xc8>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	f107 0110 	add.w	r1, r7, #16
 8000968:	2300      	movs	r3, #0
 800096a:	f04f 32ff 	mov.w	r2, #4294967295
 800096e:	f003 ffc5 	bl	80048fc <xQueueGenericSend>

		xTaskNotifyWait(0,0,&Local_u32CmdAddress,portMAX_DELAY);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f005 fba1 	bl	80060c8 <xTaskGenericNotifyWait>
		Local_CMD = (Command_t*)Local_u32CmdAddress;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	617b      	str	r3, [r7, #20]

		if(Local_CMD->Len == 1)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	7a9b      	ldrb	r3, [r3, #10]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d12d      	bne.n	80009ee <MenuTask+0x9a>
		{
			switch(Local_CMD->Payload[0])
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b32      	cmp	r3, #50	@ 0x32
 8000998:	d032      	beq.n	8000a00 <MenuTask+0xac>
 800099a:	2b32      	cmp	r3, #50	@ 0x32
 800099c:	dc1e      	bgt.n	80009dc <MenuTask+0x88>
 800099e:	2b30      	cmp	r3, #48	@ 0x30
 80009a0:	d002      	beq.n	80009a8 <MenuTask+0x54>
 80009a2:	2b31      	cmp	r3, #49	@ 0x31
 80009a4:	d00d      	beq.n	80009c2 <MenuTask+0x6e>
 80009a6:	e019      	b.n	80009dc <MenuTask+0x88>
			{
			case '0': Current_State=LedEffectState; xTaskNotify(HandleLedTask,0,eNoAction); break;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <MenuTask+0xcc>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MenuTask+0xd0>)
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2300      	movs	r3, #0
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	f005 fc04 	bl	80061c8 <xTaskGenericNotify>
 80009c0:	e01f      	b.n	8000a02 <MenuTask+0xae>
			case '1': Current_State=RTCMenuState;   xTaskNotify(HandleRTCTask,0,eNoAction); break;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MenuTask+0xcc>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MenuTask+0xd4>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2300      	movs	r3, #0
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	f005 fbf7 	bl	80061c8 <xTaskGenericNotify>
 80009da:	e012      	b.n	8000a02 <MenuTask+0xae>
			case '2': break;
			default : xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY); continue;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MenuTask+0xc8>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	2300      	movs	r3, #0
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	4911      	ldr	r1, [pc, #68]	@ (8000a2c <MenuTask+0xd8>)
 80009e8:	f003 ff88 	bl	80048fc <xQueueGenericSend>
 80009ec:	e012      	b.n	8000a14 <MenuTask+0xc0>
			}
		}
		else
		{
			xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MenuTask+0xc8>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <MenuTask+0xd8>)
 80009fa:	f003 ff7f 	bl	80048fc <xQueueGenericSend>
			continue;
 80009fe:	e009      	b.n	8000a14 <MenuTask+0xc0>
			case '2': break;
 8000a00:	bf00      	nop
		}
		/* wait to run again*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f005 fb5a 	bl	80060c8 <xTaskGenericNotifyWait>
		xQueueSend(Q_Print,(void*)&MsgMenu,portMAX_DELAY);
 8000a14:	e7a4      	b.n	8000960 <MenuTask+0xc>
 8000a16:	bf00      	nop
 8000a18:	080080b4 	.word	0x080080b4
 8000a1c:	20000184 	.word	0x20000184
 8000a20:	2000018c 	.word	0x2000018c
 8000a24:	20000178 	.word	0x20000178
 8000a28:	2000017c 	.word	0x2000017c
 8000a2c:	20000018 	.word	0x20000018

08000a30 <CMDTask>:
	}
}
void CMDTask(void * pvParameters)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]
	BaseType_t Local_RetVal;
	Command_t CMD;
	while(1)
	{
		Local_RetVal = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f005 fb3f 	bl	80060c8 <xTaskGenericNotifyWait>
 8000a4a:	6178      	str	r0, [r7, #20]
		if(Local_RetVal == pdTRUE)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d1f2      	bne.n	8000a38 <CMDTask+0x8>
		{
			proccessCMD(&CMD);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f802 	bl	8000a60 <proccessCMD>
		Local_RetVal = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000a5c:	e7ec      	b.n	8000a38 <CMDTask+0x8>
	...

08000a60 <proccessCMD>:
		}
	}
}

static void proccessCMD(Command_t* Copy_Command)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	6078      	str	r0, [r7, #4]
	ExtractCommand(Copy_Command);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f837 	bl	8000adc <ExtractCommand>

	switch(Current_State)
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <proccessCMD+0x6c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	dc24      	bgt.n	8000ac0 <proccessCMD+0x60>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	da18      	bge.n	8000aac <proccessCMD+0x4c>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <proccessCMD+0x24>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d00a      	beq.n	8000a98 <proccessCMD+0x38>
	case LedEffectState  : xTaskNotify(HandleLedTask,(uint32_t)Copy_Command,eSetValueWithOverwrite); break;
	case RTCDataCfgState :
	case RTCTimeCfgState :
	case RTCMenuState    :
		xTaskNotify(HandleRTCTask,(uint32_t)Copy_Command,eSetValueWithOverwrite); break;
	default: break;
 8000a82:	e01d      	b.n	8000ac0 <proccessCMD+0x60>
	case MainMenuState   : xTaskNotify(HandleMenuTask,(uint32_t)Copy_Command,eSetValueWithOverwrite); break;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <proccessCMD+0x70>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2303      	movs	r3, #3
 8000a90:	2100      	movs	r1, #0
 8000a92:	f005 fb99 	bl	80061c8 <xTaskGenericNotify>
 8000a96:	e014      	b.n	8000ac2 <proccessCMD+0x62>
	case LedEffectState  : xTaskNotify(HandleLedTask,(uint32_t)Copy_Command,eSetValueWithOverwrite); break;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <proccessCMD+0x74>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f005 fb8f 	bl	80061c8 <xTaskGenericNotify>
 8000aaa:	e00a      	b.n	8000ac2 <proccessCMD+0x62>
		xTaskNotify(HandleRTCTask,(uint32_t)Copy_Command,eSetValueWithOverwrite); break;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <proccessCMD+0x78>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f005 fb85 	bl	80061c8 <xTaskGenericNotify>
 8000abe:	e000      	b.n	8000ac2 <proccessCMD+0x62>
	default: break;
 8000ac0:	bf00      	nop
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000018c 	.word	0x2000018c
 8000ad0:	20000170 	.word	0x20000170
 8000ad4:	20000178 	.word	0x20000178
 8000ad8:	2000017c 	.word	0x2000017c

08000adc <ExtractCommand>:

static void ExtractCommand(Command_t* Copy_Command)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	UBaseType_t Local_NumberOfMessages;
	uint8_t u8Loop;
	Local_NumberOfMessages = uxQueueMessagesWaiting(Q_Data);
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <ExtractCommand+0x60>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f9a1 	bl	8004e30 <uxQueueMessagesWaiting>
 8000aee:	60b8      	str	r0, [r7, #8]
	for(u8Loop=0;u8Loop<Local_NumberOfMessages;u8Loop++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e010      	b.n	8000b18 <ExtractCommand+0x3c>
	{
		xQueueReceive(Q_Data,(void*)&Copy_Command->Payload[u8Loop],0);
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <ExtractCommand+0x60>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	f004 f8b2 	bl	8004c6c <xQueueReceive>
		if((char)Copy_Command->Payload[u8Loop]=='\r')
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	2b0d      	cmp	r3, #13
 8000b10:	d007      	beq.n	8000b22 <ExtractCommand+0x46>
	for(u8Loop=0;u8Loop<Local_NumberOfMessages;u8Loop++)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	3301      	adds	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8ea      	bhi.n	8000af6 <ExtractCommand+0x1a>
 8000b20:	e000      	b.n	8000b24 <ExtractCommand+0x48>
		{
			break;
 8000b22:	bf00      	nop
		}
	}
	Copy_Command->Payload[u8Loop]='\0';
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	54d1      	strb	r1, [r2, r3]
	Copy_Command->Len = u8Loop;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7bfa      	ldrb	r2, [r7, #15]
 8000b30:	729a      	strb	r2, [r3, #10]
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000188 	.word	0x20000188

08000b40 <LedTask>:

void LedTask(void * pvParameters)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	6078      	str	r0, [r7, #4]
	const char* MsgLedEffect = "\r\n======================================\r\n"
 8000b48:	4b3e      	ldr	r3, [pc, #248]	@ (8000c44 <LedTask+0x104>)
 8000b4a:	613b      	str	r3, [r7, #16]
			                   "Enter your choose here : ";
	Command_t* Local_CMD;
	uint32_t Local_u32CmdAddress;
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f005 fab5 	bl	80060c8 <xTaskGenericNotifyWait>

		xQueueSend(Q_Print,(void*)&MsgLedEffect,portMAX_DELAY);
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <LedTask+0x108>)
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	f107 0110 	add.w	r1, r7, #16
 8000b66:	2300      	movs	r3, #0
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	f003 fec6 	bl	80048fc <xQueueGenericSend>

		xTaskNotifyWait(0,0,&Local_u32CmdAddress,portMAX_DELAY);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	9200      	str	r2, [sp, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f005 faa2 	bl	80060c8 <xTaskGenericNotifyWait>
		Local_CMD = (Command_t*)Local_u32CmdAddress;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	617b      	str	r3, [r7, #20]
		if(Local_CMD->Len <= 4)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	7a9b      	ldrb	r3, [r3, #10]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d843      	bhi.n	8000c18 <LedTask+0xd8>
		{
			if(strcmp((char*)Local_CMD->Payload,"none") == 0)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	492e      	ldr	r1, [pc, #184]	@ (8000c4c <LedTask+0x10c>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb23 	bl	80001e0 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <LedTask+0x66>
			{
				LedEffectStop();
 8000ba0:	f7ff fcfe 	bl	80005a0 <LedEffectStop>
 8000ba4:	e040      	b.n	8000c28 <LedTask+0xe8>
			}
			else if(strcmp((char*)Local_CMD->Payload,"e1") == 0)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	4929      	ldr	r1, [pc, #164]	@ (8000c50 <LedTask+0x110>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb18 	bl	80001e0 <strcmp>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <LedTask+0x7e>
			{
				LedEffectStart(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fd12 	bl	80005e0 <LedEffectStart>
 8000bbc:	e034      	b.n	8000c28 <LedTask+0xe8>
			}
			else if(strcmp((char*)Local_CMD->Payload,"e2") == 0)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	4924      	ldr	r1, [pc, #144]	@ (8000c54 <LedTask+0x114>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb0c 	bl	80001e0 <strcmp>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <LedTask+0x96>
			{
				LedEffectStart(2);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fd06 	bl	80005e0 <LedEffectStart>
 8000bd4:	e028      	b.n	8000c28 <LedTask+0xe8>
			}
			else if(strcmp((char*)Local_CMD->Payload,"e3") == 0)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	491f      	ldr	r1, [pc, #124]	@ (8000c58 <LedTask+0x118>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb00 	bl	80001e0 <strcmp>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <LedTask+0xae>
			{
				LedEffectStart(3);
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff fcfa 	bl	80005e0 <LedEffectStart>
 8000bec:	e01c      	b.n	8000c28 <LedTask+0xe8>
			}
			else if(strcmp((char*)Local_CMD->Payload,"e4") == 0)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	491a      	ldr	r1, [pc, #104]	@ (8000c5c <LedTask+0x11c>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff faf4 	bl	80001e0 <strcmp>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d103      	bne.n	8000c06 <LedTask+0xc6>
			{
				LedEffectStart(4);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f7ff fcee 	bl	80005e0 <LedEffectStart>
 8000c04:	e010      	b.n	8000c28 <LedTask+0xe8>
			}
			else
			{
				xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <LedTask+0x108>)
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	4913      	ldr	r1, [pc, #76]	@ (8000c60 <LedTask+0x120>)
 8000c12:	f003 fe73 	bl	80048fc <xQueueGenericSend>
 8000c16:	e007      	b.n	8000c28 <LedTask+0xe8>
			}
		}
		else
		{
			xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <LedTask+0x108>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c22:	490f      	ldr	r1, [pc, #60]	@ (8000c60 <LedTask+0x120>)
 8000c24:	f003 fe6a 	bl	80048fc <xQueueGenericSend>
		}
		Current_State = MainMenuState;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <LedTask+0x124>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		xTaskNotify(HandleMenuTask,0,eNoAction);
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <LedTask+0x128>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2300      	movs	r3, #0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f005 fac4 	bl	80061c8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000c40:	e784      	b.n	8000b4c <LedTask+0xc>
 8000c42:	bf00      	nop
 8000c44:	080081c0 	.word	0x080081c0
 8000c48:	20000184 	.word	0x20000184
 8000c4c:	0800827c 	.word	0x0800827c
 8000c50:	08008284 	.word	0x08008284
 8000c54:	08008288 	.word	0x08008288
 8000c58:	0800828c 	.word	0x0800828c
 8000c5c:	08008290 	.word	0x08008290
 8000c60:	20000018 	.word	0x20000018
 8000c64:	2000018c 	.word	0x2000018c
 8000c68:	20000170 	.word	0x20000170

08000c6c <RTCTask>:
	}
}

void RTCTask(void * pvParameters)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b092      	sub	sp, #72	@ 0x48
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	6078      	str	r0, [r7, #4]
	const char* MsgRTC1 = "\r\n======================================\r\n"
 8000c74:	4bb3      	ldr	r3, [pc, #716]	@ (8000f44 <RTCTask+0x2d8>)
 8000c76:	633b      	str	r3, [r7, #48]	@ 0x30
					   "                Menu                  \r\n"
		               "======================================\r\n";
	const char* MsgRTC2 =
 8000c78:	4bb3      	ldr	r3, [pc, #716]	@ (8000f48 <RTCTask+0x2dc>)
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			"\r\n\nconfige time     ------------>0\r\n"
			"confige data       ------------>1\r\n"
			"enable reporting   ------------>2\r\n"
			"Exit               ------------>3\r\n"
			"Enter your choose here : ";
	const char* MsgRTCHour = "\r\nEnter the Hour(1 - 12) : ";
 8000c7c:	4bb3      	ldr	r3, [pc, #716]	@ (8000f4c <RTCTask+0x2e0>)
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char* MsgRTCMin = "\r\nEnter the Minutes(0 - 59) : ";
 8000c80:	4bb3      	ldr	r3, [pc, #716]	@ (8000f50 <RTCTask+0x2e4>)
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
	const char* MsgRTCSec = "\r\nEnter the Second(0 - 59) : ";
 8000c84:	4bb3      	ldr	r3, [pc, #716]	@ (8000f54 <RTCTask+0x2e8>)
 8000c86:	623b      	str	r3, [r7, #32]
	const char* MsgRTCDay = "\r\nEnter the day(1 - 31) : ";
 8000c88:	4bb3      	ldr	r3, [pc, #716]	@ (8000f58 <RTCTask+0x2ec>)
 8000c8a:	61fb      	str	r3, [r7, #28]
	const char* MsgRTCMonth = "\r\nEnter the month(1 - 12) : ";
 8000c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8000f5c <RTCTask+0x2f0>)
 8000c8e:	61bb      	str	r3, [r7, #24]
	const char* MsgRTCYour = "\r\nEnter the Your(0 - 99) : ";
 8000c90:	4bb3      	ldr	r3, [pc, #716]	@ (8000f60 <RTCTask+0x2f4>)
 8000c92:	617b      	str	r3, [r7, #20]
	const char* MsgRTCConfigSuccess = "\r\nConfiguration Successful\r\n";
 8000c94:	4bb3      	ldr	r3, [pc, #716]	@ (8000f64 <RTCTask+0x2f8>)
 8000c96:	613b      	str	r3, [r7, #16]
	const char* MsgRTCEnReporting = "\r\nEnable time & data reporting [y/n]\r\n";
 8000c98:	4bb3      	ldr	r3, [pc, #716]	@ (8000f68 <RTCTask+0x2fc>)
 8000c9a:	60fb      	str	r3, [r7, #12]
	static uint8_t RTCCfgState=0;
	uint8_t Local_u8Hour,Local_u8Min,Local_u8Sec;
	uint8_t Local_u8Day,Local_u8Month,Local_u8Your;
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f005 fa0d 	bl	80060c8 <xTaskGenericNotifyWait>
		xQueueSend(Q_Print,&MsgRTC1,portMAX_DELAY);
 8000cae:	4baf      	ldr	r3, [pc, #700]	@ (8000f6c <RTCTask+0x300>)
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	f003 fe1e 	bl	80048fc <xQueueGenericSend>
		RTC_voidShowTimeDate();
 8000cc0:	f7ff fda6 	bl	8000810 <RTC_voidShowTimeDate>
		xQueueSend(Q_Print,&MsgRTC2,portMAX_DELAY);
 8000cc4:	4ba9      	ldr	r3, [pc, #676]	@ (8000f6c <RTCTask+0x300>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	f003 fe13 	bl	80048fc <xQueueGenericSend>

		while(Current_State != MainMenuState)
 8000cd6:	e19b      	b.n	8001010 <RTCTask+0x3a4>
		{
			xTaskNotifyWait(0,0,&Local_u32CmdAddress,portMAX_DELAY);
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f005 f9ee 	bl	80060c8 <xTaskGenericNotifyWait>
			Local_CMD=(Command_t*)Local_u32CmdAddress;
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
			switch(Current_State)
 8000cf0:	4b9f      	ldr	r3, [pc, #636]	@ (8000f70 <RTCTask+0x304>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	f000 80e6 	beq.w	8000ec6 <RTCTask+0x25a>
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	f300 8188 	bgt.w	8001010 <RTCTask+0x3a4>
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d002      	beq.n	8000d0a <RTCTask+0x9e>
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d059      	beq.n	8000dbc <RTCTask+0x150>
 8000d08:	e182      	b.n	8001010 <RTCTask+0x3a4>
			{
			case RTCMenuState :
				if(Local_CMD->Len == 1)
 8000d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d0c:	7a9b      	ldrb	r3, [r3, #10]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d147      	bne.n	8000da2 <RTCTask+0x136>
				{
					switch(Local_CMD->Payload[0])
 8000d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3b30      	subs	r3, #48	@ 0x30
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d836      	bhi.n	8000d8a <RTCTask+0x11e>
 8000d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d24 <RTCTask+0xb8>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000d4f 	.word	0x08000d4f
 8000d2c:	08000d69 	.word	0x08000d69
 8000d30:	08000d83 	.word	0x08000d83
					{
					case '0': Current_State = RTCTimeCfgState; xQueueSend(Q_Print,&MsgRTCHour,portMAX_DELAY); break;
 8000d34:	4b8e      	ldr	r3, [pc, #568]	@ (8000f70 <RTCTask+0x304>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	4b8c      	ldr	r3, [pc, #560]	@ (8000f6c <RTCTask+0x300>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000d42:	2300      	movs	r3, #0
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	f003 fdd8 	bl	80048fc <xQueueGenericSend>
 8000d4c:	e035      	b.n	8000dba <RTCTask+0x14e>
					case '1': Current_State = RTCDataCfgState; xQueueSend(Q_Print,&MsgRTCDay,portMAX_DELAY); break;
 8000d4e:	4b88      	ldr	r3, [pc, #544]	@ (8000f70 <RTCTask+0x304>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	4b85      	ldr	r3, [pc, #532]	@ (8000f6c <RTCTask+0x300>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	f107 011c 	add.w	r1, r7, #28
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d62:	f003 fdcb 	bl	80048fc <xQueueGenericSend>
 8000d66:	e028      	b.n	8000dba <RTCTask+0x14e>
					case '2': Current_State = RTCReportstate;  xQueueSend(Q_Print,&MsgRTCEnReporting,portMAX_DELAY); break;
 8000d68:	4b81      	ldr	r3, [pc, #516]	@ (8000f70 <RTCTask+0x304>)
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f6c <RTCTask+0x300>)
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	f107 010c 	add.w	r1, r7, #12
 8000d76:	2300      	movs	r3, #0
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	f003 fdbe 	bl	80048fc <xQueueGenericSend>
 8000d80:	e01b      	b.n	8000dba <RTCTask+0x14e>
					case '3': Current_State = MainMenuState; break;
 8000d82:	4b7b      	ldr	r3, [pc, #492]	@ (8000f70 <RTCTask+0x304>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e017      	b.n	8000dba <RTCTask+0x14e>
					default :
						Current_State = MainMenuState;
 8000d8a:	4b79      	ldr	r3, [pc, #484]	@ (8000f70 <RTCTask+0x304>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
						xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000d90:	4b76      	ldr	r3, [pc, #472]	@ (8000f6c <RTCTask+0x300>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	4976      	ldr	r1, [pc, #472]	@ (8000f74 <RTCTask+0x308>)
 8000d9c:	f003 fdae 	bl	80048fc <xQueueGenericSend>
						break;
 8000da0:	e00b      	b.n	8000dba <RTCTask+0x14e>
					}
				}
				else
				{
					Current_State = MainMenuState;
 8000da2:	4b73      	ldr	r3, [pc, #460]	@ (8000f70 <RTCTask+0x304>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
					xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000da8:	4b70      	ldr	r3, [pc, #448]	@ (8000f6c <RTCTask+0x300>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	2300      	movs	r3, #0
 8000dae:	f04f 32ff 	mov.w	r2, #4294967295
 8000db2:	4970      	ldr	r1, [pc, #448]	@ (8000f74 <RTCTask+0x308>)
 8000db4:	f003 fda2 	bl	80048fc <xQueueGenericSend>
				}
				break;
 8000db8:	e12a      	b.n	8001010 <RTCTask+0x3a4>
 8000dba:	e129      	b.n	8001010 <RTCTask+0x3a4>

			case RTCTimeCfgState :
				if(Local_CMD->Len <= 2)
 8000dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dbe:	7a9b      	ldrb	r3, [r3, #10]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d873      	bhi.n	8000eac <RTCTask+0x240>
				{
					switch(RTCCfgState)
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f78 <RTCTask+0x30c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d035      	beq.n	8000e38 <RTCTask+0x1cc>
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	f300 811c 	bgt.w	800100a <RTCTask+0x39e>
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <RTCTask+0x170>
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d017      	beq.n	8000e0a <RTCTask+0x19e>
				else
				{
					Current_State = MainMenuState;
					xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
				}
				break;
 8000dda:	e116      	b.n	800100a <RTCTask+0x39e>
						Local_u8Hour = u8GetNumber((char*)Local_CMD->Payload,Local_CMD->Len);
 8000ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000de0:	7a9b      	ldrb	r3, [r3, #10]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4610      	mov	r0, r2
 8000de6:	f000 f92d 	bl	8001044 <u8GetNumber>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						xQueueSend(Q_Print,(void*)&MsgRTCMin,portMAX_DELAY);
 8000df0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f6c <RTCTask+0x300>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfe:	f003 fd7d 	bl	80048fc <xQueueGenericSend>
						RTCCfgState = MM_STATE;
 8000e02:	4b5d      	ldr	r3, [pc, #372]	@ (8000f78 <RTCTask+0x30c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
						break;
 8000e08:	e05c      	b.n	8000ec4 <RTCTask+0x258>
						Local_u8Min = u8GetNumber((char*)Local_CMD->Payload,Local_CMD->Len);
 8000e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e0e:	7a9b      	ldrb	r3, [r3, #10]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f000 f916 	bl	8001044 <u8GetNumber>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
						xQueueSend(Q_Print,(void*)&MsgRTCSec,portMAX_DELAY);
 8000e1e:	4b53      	ldr	r3, [pc, #332]	@ (8000f6c <RTCTask+0x300>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	f107 0120 	add.w	r1, r7, #32
 8000e26:	2300      	movs	r3, #0
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	f003 fd66 	bl	80048fc <xQueueGenericSend>
						RTCCfgState = SS_STATE;
 8000e30:	4b51      	ldr	r3, [pc, #324]	@ (8000f78 <RTCTask+0x30c>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	701a      	strb	r2, [r3, #0]
						break;
 8000e36:	e045      	b.n	8000ec4 <RTCTask+0x258>
						Local_u8Sec = u8GetNumber((char*)Local_CMD->Payload,Local_CMD->Len);
 8000e38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e3c:	7a9b      	ldrb	r3, [r3, #10]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4610      	mov	r0, r2
 8000e42:	f000 f8ff 	bl	8001044 <u8GetNumber>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
						if(RTC_u8IsRTCTimeCigValid(Local_u8Hour,Local_u8Min,Local_u8Sec))
 8000e4c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000e50:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8000e54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fd5d 	bl	8000918 <RTC_u8IsRTCTimeCigValid>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d014      	beq.n	8000e8e <RTCTask+0x222>
							RTC_ConfigTime(Local_u8Hour,Local_u8Min,Local_u8Sec);
 8000e64:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000e68:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8000e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd35 	bl	80008e0 <RTC_ConfigTime>
							xQueueSend(Q_Print,(void*)&MsgRTCConfigSuccess,portMAX_DELAY);
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <RTCTask+0x300>)
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	f107 0110 	add.w	r1, r7, #16
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	f003 fd3a 	bl	80048fc <xQueueGenericSend>
							RTC_voidShowTimeDate();
 8000e88:	f7ff fcc2 	bl	8000810 <RTC_voidShowTimeDate>
 8000e8c:	e007      	b.n	8000e9e <RTCTask+0x232>
							xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000e8e:	4b37      	ldr	r3, [pc, #220]	@ (8000f6c <RTCTask+0x300>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	4936      	ldr	r1, [pc, #216]	@ (8000f74 <RTCTask+0x308>)
 8000e9a:	f003 fd2f 	bl	80048fc <xQueueGenericSend>
						RTCCfgState =0;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <RTCTask+0x30c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
						Current_State = MainMenuState;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <RTCTask+0x304>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
						break;
 8000eaa:	e00b      	b.n	8000ec4 <RTCTask+0x258>
					Current_State = MainMenuState;
 8000eac:	4b30      	ldr	r3, [pc, #192]	@ (8000f70 <RTCTask+0x304>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
					xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <RTCTask+0x300>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	492d      	ldr	r1, [pc, #180]	@ (8000f74 <RTCTask+0x308>)
 8000ebe:	f003 fd1d 	bl	80048fc <xQueueGenericSend>
				break;
 8000ec2:	e0a2      	b.n	800100a <RTCTask+0x39e>
 8000ec4:	e0a1      	b.n	800100a <RTCTask+0x39e>

			case RTCDataCfgState :
				if(Local_CMD->Len <= 2)
 8000ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ec8:	7a9b      	ldrb	r3, [r3, #10]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	f200 8090 	bhi.w	8000ff0 <RTCTask+0x384>
				{
					switch(RTCCfgState)
 8000ed0:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <RTCTask+0x30c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d051      	beq.n	8000f7c <RTCTask+0x310>
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f300 8098 	bgt.w	800100e <RTCTask+0x3a2>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <RTCTask+0x27c>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d017      	beq.n	8000f16 <RTCTask+0x2aa>
				else
				{
					Current_State = MainMenuState;
					xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
				}
				break;
 8000ee6:	e092      	b.n	800100e <RTCTask+0x3a2>
						Local_u8Day = u8GetNumber((char*)Local_CMD->Payload,Local_CMD->Len);
 8000ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eec:	7a9b      	ldrb	r3, [r3, #10]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	f000 f8a7 	bl	8001044 <u8GetNumber>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						xQueueSend(Q_Print,(void*)&MsgRTCMonth,portMAX_DELAY);
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <RTCTask+0x300>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f107 0118 	add.w	r1, r7, #24
 8000f04:	2300      	movs	r3, #0
 8000f06:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0a:	f003 fcf7 	bl	80048fc <xQueueGenericSend>
						RTCCfgState = MONTH_STATE;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <RTCTask+0x30c>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
						break;
 8000f14:	e078      	b.n	8001008 <RTCTask+0x39c>
						Local_u8Month = u8GetNumber((char*)Local_CMD->Payload,Local_CMD->Len);
 8000f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f1a:	7a9b      	ldrb	r3, [r3, #10]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f000 f890 	bl	8001044 <u8GetNumber>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
						xQueueSend(Q_Print,(void*)&MsgRTCYour,portMAX_DELAY);
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <RTCTask+0x300>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	f107 0114 	add.w	r1, r7, #20
 8000f32:	2300      	movs	r3, #0
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	f003 fce0 	bl	80048fc <xQueueGenericSend>
						RTCCfgState = YOUR_STATE;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <RTCTask+0x30c>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	701a      	strb	r2, [r3, #0]
						break;
 8000f42:	e061      	b.n	8001008 <RTCTask+0x39c>
 8000f44:	08008294 	.word	0x08008294
 8000f48:	08008310 	.word	0x08008310
 8000f4c:	080083b8 	.word	0x080083b8
 8000f50:	080083d4 	.word	0x080083d4
 8000f54:	080083f4 	.word	0x080083f4
 8000f58:	08008414 	.word	0x08008414
 8000f5c:	08008430 	.word	0x08008430
 8000f60:	08008450 	.word	0x08008450
 8000f64:	0800846c 	.word	0x0800846c
 8000f68:	0800848c 	.word	0x0800848c
 8000f6c:	20000184 	.word	0x20000184
 8000f70:	2000018c 	.word	0x2000018c
 8000f74:	20000018 	.word	0x20000018
 8000f78:	20000106 	.word	0x20000106
						Local_u8Your = u8GetNumber((char*)Local_CMD->Payload,Local_CMD->Len);
 8000f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f80:	7a9b      	ldrb	r3, [r3, #10]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f000 f85d 	bl	8001044 <u8GetNumber>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if(RTC_u8IsRTCTimeCigValid(Local_u8Day,Local_u8Month,Local_u8Your))
 8000f90:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000f94:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8000f98:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fcbb 	bl	8000918 <RTC_u8IsRTCTimeCigValid>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d014      	beq.n	8000fd2 <RTCTask+0x366>
							RTC_ConfigTime(Local_u8Day,Local_u8Month,Local_u8Your);
 8000fa8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000fac:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8000fb0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fc93 	bl	80008e0 <RTC_ConfigTime>
							xQueueSend(Q_Print,(void*)&MsgRTCConfigSuccess,portMAX_DELAY);
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <RTCTask+0x3c4>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	f107 0110 	add.w	r1, r7, #16
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	f003 fc98 	bl	80048fc <xQueueGenericSend>
							RTC_voidShowTimeDate();
 8000fcc:	f7ff fc20 	bl	8000810 <RTC_voidShowTimeDate>
 8000fd0:	e007      	b.n	8000fe2 <RTCTask+0x376>
							xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <RTCTask+0x3c4>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	4915      	ldr	r1, [pc, #84]	@ (8001034 <RTCTask+0x3c8>)
 8000fde:	f003 fc8d 	bl	80048fc <xQueueGenericSend>
						RTCCfgState =0;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <RTCTask+0x3cc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
						Current_State = MainMenuState;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <RTCTask+0x3d0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
						break;
 8000fee:	e00b      	b.n	8001008 <RTCTask+0x39c>
					Current_State = MainMenuState;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <RTCTask+0x3d0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
					xQueueSend(Q_Print,(void*)&MsgInvaild,portMAX_DELAY);
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <RTCTask+0x3c4>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <RTCTask+0x3c8>)
 8001002:	f003 fc7b 	bl	80048fc <xQueueGenericSend>
				break;
 8001006:	e002      	b.n	800100e <RTCTask+0x3a2>
 8001008:	e001      	b.n	800100e <RTCTask+0x3a2>
				break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <RTCTask+0x3a4>
				break;
 800100e:	bf00      	nop
		while(Current_State != MainMenuState)
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <RTCTask+0x3d0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f ae5f 	bne.w	8000cd8 <RTCTask+0x6c>
			}
		}
		xTaskNotify(HandleMenuTask,0,eNoAction);
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <RTCTask+0x3d4>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	2300      	movs	r3, #0
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	f005 f8ce 	bl	80061c8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800102c:	e636      	b.n	8000c9c <RTCTask+0x30>
 800102e:	bf00      	nop
 8001030:	20000184 	.word	0x20000184
 8001034:	20000018 	.word	0x20000018
 8001038:	20000106 	.word	0x20000106
 800103c:	2000018c 	.word	0x2000018c
 8001040:	20000170 	.word	0x20000170

08001044 <u8GetNumber>:
	}
}

uint8_t u8GetNumber(const char* Copy_ASCILNum,uint8_t Copy_u8Len)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8DecimalNum;
	if(Copy_u8Len == 1)
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d104      	bne.n	8001060 <u8GetNumber+0x1c>
	{
		Local_u8DecimalNum = Copy_ASCILNum[0]-'0';
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	3b30      	subs	r3, #48	@ 0x30
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e012      	b.n	8001086 <u8GetNumber+0x42>
	}
	else if(Copy_u8Len == 2)
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d10f      	bne.n	8001086 <u8GetNumber+0x42>
	{
		Local_u8DecimalNum = (Copy_ASCILNum[0]-'0')*10 + (Copy_ASCILNum[1]-'0');
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3b30      	subs	r3, #48	@ 0x30
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b30      	subs	r3, #48	@ 0x30
 8001084:	73fb      	strb	r3, [r7, #15]
	}
	else
	{

	}
	return Local_u8DecimalNum;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <PrintTask>:

void PrintTask(void * pvParameters)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	uint32_t* local_pu32Msg;
	while(1)
	{
		xQueueReceive(Q_Print, &local_pu32Msg, portMAX_DELAY);
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <PrintTask+0x38>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fddf 	bl	8004c6c <xQueueReceive>
		HAL_UART_Transmit(&huart6, (uint8_t*)local_pu32Msg,strlen((char*)local_pu32Msg), HAL_MAX_DELAY);
 80010ae:	68fc      	ldr	r4, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f89e 	bl	80001f4 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	4621      	mov	r1, r4
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <PrintTask+0x3c>)
 80010c4:	f002 fa5c 	bl	8003580 <HAL_UART_Transmit>
		xQueueReceive(Q_Print, &local_pu32Msg, portMAX_DELAY);
 80010c8:	bf00      	nop
 80010ca:	e7e7      	b.n	800109c <PrintTask+0x8>
 80010cc:	20000184 	.word	0x20000184
 80010d0:	20000128 	.word	0x20000128

080010d4 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
	if( ! xQueueIsQueueFullFromISR(Q_Data))
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <HAL_UART_RxCpltCallback+0x74>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 ffd4 	bl	800508e <xQueueIsQueueFullFromISR>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d107      	bne.n	80010fc <HAL_UART_RxCpltCallback+0x28>
	{
		/* Queue is not full */
		xQueueSendFromISR(Q_Data,(void*)&UserData,NULL);
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <HAL_UART_RxCpltCallback+0x74>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	2200      	movs	r2, #0
 80010f4:	4915      	ldr	r1, [pc, #84]	@ (800114c <HAL_UART_RxCpltCallback+0x78>)
 80010f6:	f003 fd03 	bl	8004b00 <xQueueGenericSendFromISR>
 80010fa:	e00b      	b.n	8001114 <HAL_UART_RxCpltCallback+0x40>

	}
	else
	{
		/* Queue is full */
		if(UserData=='\r')
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <HAL_UART_RxCpltCallback+0x78>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b0d      	cmp	r3, #13
 8001104:	d106      	bne.n	8001114 <HAL_UART_RxCpltCallback+0x40>
		{
			//uint8_t DUMMY;
			//xQueueReceiveFromISR(Q_Data,(void*)&DUMMY,NULL);
			//xQueueSendFromISR(Q_Data,(void*)&UserData,NULL);
			xQueueOverwriteFromISR(Q_Data,(void*)&UserData,NULL);
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_UART_RxCpltCallback+0x74>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	2302      	movs	r3, #2
 800110c:	2200      	movs	r2, #0
 800110e:	490f      	ldr	r1, [pc, #60]	@ (800114c <HAL_UART_RxCpltCallback+0x78>)
 8001110:	f003 fcf6 	bl	8004b00 <xQueueGenericSendFromISR>
		else
		{
			/* ignore the data */
		}
	}
	if(UserData=='\r')
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <HAL_UART_RxCpltCallback+0x78>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b0d      	cmp	r3, #13
 800111c:	d10a      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x60>
	{
		/* command is finished */
		xTaskNotifyFromISR(HandleCMDTask,0,eNoAction,NULL);
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_UART_RxCpltCallback+0x7c>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	2300      	movs	r3, #0
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2300      	movs	r3, #0
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	f005 f970 	bl	8006414 <xTaskGenericNotifyFromISR>
	}
	/* enable uart receving in interrupt mode */
	  HAL_UART_Receive_IT(&huart6,(uint8_t *)&UserData, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	4905      	ldr	r1, [pc, #20]	@ (800114c <HAL_UART_RxCpltCallback+0x78>)
 8001138:	4806      	ldr	r0, [pc, #24]	@ (8001154 <HAL_UART_RxCpltCallback+0x80>)
 800113a:	f002 faac 	bl	8003696 <HAL_UART_Receive_IT>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000188 	.word	0x20000188
 800114c:	2000018d 	.word	0x2000018d
 8001150:	20000174 	.word	0x20000174
 8001154:	20000128 	.word	0x20000128

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b08d      	sub	sp, #52	@ 0x34
 800115c:	af02      	add	r7, sp, #8
  //vInitPrioGroupValue();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 fbdd 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f90d 	bl	8001380 <SystemClock_Config>
  //SEGGER_SYSVIEW_Conf();
  // SEGGER_SYSVIEW_Start();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f000 f9bd 	bl	80014e4 <MX_GPIO_Init>
  MX_RTC_Init();
 800116a:	f000 f96b 	bl	8001444 <MX_RTC_Init>
  MX_USART6_UART_Init();
 800116e:	f000 f98f 	bl	8001490 <MX_USART6_UART_Init>

  //SEGGER_UART_init(500000);
  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start();

  Local_State = xTaskCreate(MenuTask, "MenuTask", 200,NULL, 2,&HandleMenuTask);
 8001172:	4b6d      	ldr	r3, [pc, #436]	@ (8001328 <main+0x1d0>)
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	2302      	movs	r3, #2
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	22c8      	movs	r2, #200	@ 0xc8
 800117e:	496b      	ldr	r1, [pc, #428]	@ (800132c <main+0x1d4>)
 8001180:	486b      	ldr	r0, [pc, #428]	@ (8001330 <main+0x1d8>)
 8001182:	f004 f82f 	bl	80051e4 <xTaskCreate>
 8001186:	6238      	str	r0, [r7, #32]
  configASSERT(Local_State==pdPASS);
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d00b      	beq.n	80011a6 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800118e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001192:	f383 8811 	msr	BASEPRI, r3
 8001196:	f3bf 8f6f 	isb	sy
 800119a:	f3bf 8f4f 	dsb	sy
 800119e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	e7fd      	b.n	80011a2 <main+0x4a>

  Local_State = xTaskCreate(CMDTask, "CMDTask", 200,NULL, 2,&HandleCMDTask);
 80011a6:	4b63      	ldr	r3, [pc, #396]	@ (8001334 <main+0x1dc>)
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	2302      	movs	r3, #2
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	22c8      	movs	r2, #200	@ 0xc8
 80011b2:	4961      	ldr	r1, [pc, #388]	@ (8001338 <main+0x1e0>)
 80011b4:	4861      	ldr	r0, [pc, #388]	@ (800133c <main+0x1e4>)
 80011b6:	f004 f815 	bl	80051e4 <xTaskCreate>
 80011ba:	6238      	str	r0, [r7, #32]
  configASSERT(Local_State==pdPASS);
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d00b      	beq.n	80011da <main+0x82>
        __asm volatile
 80011c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	61bb      	str	r3, [r7, #24]
    }
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	e7fd      	b.n	80011d6 <main+0x7e>

  Local_State = xTaskCreate(LedTask, "LedTask", 200,NULL, 2,&HandleLedTask);
 80011da:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <main+0x1e8>)
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2302      	movs	r3, #2
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2300      	movs	r3, #0
 80011e4:	22c8      	movs	r2, #200	@ 0xc8
 80011e6:	4957      	ldr	r1, [pc, #348]	@ (8001344 <main+0x1ec>)
 80011e8:	4857      	ldr	r0, [pc, #348]	@ (8001348 <main+0x1f0>)
 80011ea:	f003 fffb 	bl	80051e4 <xTaskCreate>
 80011ee:	6238      	str	r0, [r7, #32]
  configASSERT(Local_State==pdPASS);
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d00b      	beq.n	800120e <main+0xb6>
        __asm volatile
 80011f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011fa:	f383 8811 	msr	BASEPRI, r3
 80011fe:	f3bf 8f6f 	isb	sy
 8001202:	f3bf 8f4f 	dsb	sy
 8001206:	617b      	str	r3, [r7, #20]
    }
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	e7fd      	b.n	800120a <main+0xb2>

  Local_State = xTaskCreate(RTCTask, "RTCTask", 200,NULL, 2,&HandleRTCTask);
 800120e:	4b4f      	ldr	r3, [pc, #316]	@ (800134c <main+0x1f4>)
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2302      	movs	r3, #2
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	22c8      	movs	r2, #200	@ 0xc8
 800121a:	494d      	ldr	r1, [pc, #308]	@ (8001350 <main+0x1f8>)
 800121c:	484d      	ldr	r0, [pc, #308]	@ (8001354 <main+0x1fc>)
 800121e:	f003 ffe1 	bl	80051e4 <xTaskCreate>
 8001222:	6238      	str	r0, [r7, #32]
  configASSERT(Local_State==pdPASS);
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d00b      	beq.n	8001242 <main+0xea>
        __asm volatile
 800122a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800122e:	f383 8811 	msr	BASEPRI, r3
 8001232:	f3bf 8f6f 	isb	sy
 8001236:	f3bf 8f4f 	dsb	sy
 800123a:	613b      	str	r3, [r7, #16]
    }
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <main+0xe6>

  Local_State = xTaskCreate(PrintTask, "PrintTask", 200,NULL, 2,&HandlePrintTask);
 8001242:	4b45      	ldr	r3, [pc, #276]	@ (8001358 <main+0x200>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2302      	movs	r3, #2
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	22c8      	movs	r2, #200	@ 0xc8
 800124e:	4943      	ldr	r1, [pc, #268]	@ (800135c <main+0x204>)
 8001250:	4843      	ldr	r0, [pc, #268]	@ (8001360 <main+0x208>)
 8001252:	f003 ffc7 	bl	80051e4 <xTaskCreate>
 8001256:	6238      	str	r0, [r7, #32]
  configASSERT(Local_State==pdPASS);
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00b      	beq.n	8001276 <main+0x11e>
        __asm volatile
 800125e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001262:	f383 8811 	msr	BASEPRI, r3
 8001266:	f3bf 8f6f 	isb	sy
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	60fb      	str	r3, [r7, #12]
    }
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	e7fd      	b.n	8001272 <main+0x11a>

  Q_Print = xQueueCreate(10,sizeof(uint32_t));
 8001276:	2200      	movs	r2, #0
 8001278:	2104      	movs	r1, #4
 800127a:	200a      	movs	r0, #10
 800127c:	f003 facc 	bl	8004818 <xQueueGenericCreate>
 8001280:	4603      	mov	r3, r0
 8001282:	4a38      	ldr	r2, [pc, #224]	@ (8001364 <main+0x20c>)
 8001284:	6013      	str	r3, [r2, #0]
  configASSERT(Q_Print!=NULL);
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <main+0x20c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10b      	bne.n	80012a6 <main+0x14e>
        __asm volatile
 800128e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001292:	f383 8811 	msr	BASEPRI, r3
 8001296:	f3bf 8f6f 	isb	sy
 800129a:	f3bf 8f4f 	dsb	sy
 800129e:	60bb      	str	r3, [r7, #8]
    }
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	e7fd      	b.n	80012a2 <main+0x14a>

  Q_Data = xQueueCreate(10,sizeof(char));
 80012a6:	2200      	movs	r2, #0
 80012a8:	2101      	movs	r1, #1
 80012aa:	200a      	movs	r0, #10
 80012ac:	f003 fab4 	bl	8004818 <xQueueGenericCreate>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001368 <main+0x210>)
 80012b4:	6013      	str	r3, [r2, #0]
  configASSERT(Q_Data!=NULL);
 80012b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <main+0x210>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <main+0x17e>
        __asm volatile
 80012be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	f3bf 8f6f 	isb	sy
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	607b      	str	r3, [r7, #4]
    }
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	e7fd      	b.n	80012d2 <main+0x17a>

  for(Local_u8Count=0; Local_u8Count<4; Local_u8Count++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012dc:	e017      	b.n	800130e <main+0x1b6>
  {
	  HandleLedTimer[Local_u8Count] = xTimerCreate("LedTimer", pdMS_TO_TICKS(500), pdTRUE, (void*)(Local_u8Count+1),LedEffectCallBackFun);
 80012de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012e2:	3301      	adds	r3, #1
 80012e4:	461a      	mov	r2, r3
 80012e6:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <main+0x214>)
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4613      	mov	r3, r2
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012f6:	481e      	ldr	r0, [pc, #120]	@ (8001370 <main+0x218>)
 80012f8:	f005 fa9e 	bl	8006838 <xTimerCreate>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001374 <main+0x21c>)
 8001300:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for(Local_u8Count=0; Local_u8Count<4; Local_u8Count++)
 8001304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001308:	3301      	adds	r3, #1
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800130e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001312:	2b03      	cmp	r3, #3
 8001314:	d9e3      	bls.n	80012de <main+0x186>
  }

  /* enable uart receving in interrupt mode */
  HAL_UART_Receive_IT(&huart6,(uint8_t *)&UserData, 1);
 8001316:	2201      	movs	r2, #1
 8001318:	4917      	ldr	r1, [pc, #92]	@ (8001378 <main+0x220>)
 800131a:	4818      	ldr	r0, [pc, #96]	@ (800137c <main+0x224>)
 800131c:	f002 f9bb 	bl	8003696 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8001320:	f004 f8cc 	bl	80054bc <vTaskStartScheduler>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <main+0x1cc>
 8001328:	20000170 	.word	0x20000170
 800132c:	080084b4 	.word	0x080084b4
 8001330:	08000955 	.word	0x08000955
 8001334:	20000174 	.word	0x20000174
 8001338:	080084c0 	.word	0x080084c0
 800133c:	08000a31 	.word	0x08000a31
 8001340:	20000178 	.word	0x20000178
 8001344:	080084c8 	.word	0x080084c8
 8001348:	08000b41 	.word	0x08000b41
 800134c:	2000017c 	.word	0x2000017c
 8001350:	080084d0 	.word	0x080084d0
 8001354:	08000c6d 	.word	0x08000c6d
 8001358:	20000180 	.word	0x20000180
 800135c:	080084d8 	.word	0x080084d8
 8001360:	08001095 	.word	0x08001095
 8001364:	20000184 	.word	0x20000184
 8001368:	20000188 	.word	0x20000188
 800136c:	080007c1 	.word	0x080007c1
 8001370:	080084e4 	.word	0x080084e4
 8001374:	20000190 	.word	0x20000190
 8001378:	2000018d 	.word	0x2000018d
 800137c:	20000128 	.word	0x20000128

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	@ 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	2230      	movs	r2, #48	@ 0x30
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f006 f9be 	bl	8007710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <SystemClock_Config+0xbc>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a23      	ldr	r2, [pc, #140]	@ (800143c <SystemClock_Config+0xbc>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b21      	ldr	r3, [pc, #132]	@ (800143c <SystemClock_Config+0xbc>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <SystemClock_Config+0xc0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <SystemClock_Config+0xc0>)
 80013ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <SystemClock_Config+0xc0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013e0:	230a      	movs	r3, #10
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e8:	2310      	movs	r3, #16
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fdfd 	bl	8001ff8 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001404:	f000 f8c1 	bl	800158a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f860 	bl	80024e8 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800142e:	f000 f8ac 	bl	800158a <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	@ 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_RTC_Init+0x44>)
 800144a:	4a10      	ldr	r2, [pc, #64]	@ (800148c <MX_RTC_Init+0x48>)
 800144c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_RTC_Init+0x44>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_RTC_Init+0x44>)
 8001456:	227f      	movs	r2, #127	@ 0x7f
 8001458:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <MX_RTC_Init+0x44>)
 800145c:	22ff      	movs	r2, #255	@ 0xff
 800145e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_RTC_Init+0x44>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <MX_RTC_Init+0x44>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_RTC_Init+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_RTC_Init+0x44>)
 8001474:	f001 fb38 	bl	8002ae8 <HAL_RTC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800147e:	f000 f884 	bl	800158a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000108 	.word	0x20000108
 800148c:	40002800 	.word	0x40002800

08001490 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <MX_USART6_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_USART6_UART_Init+0x4c>)
 80014c8:	f002 f80a 	bl	80034e0 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f000 f85a 	bl	800158a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000128 	.word	0x20000128
 80014e0:	40011400 	.word	0x40011400

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <MX_GPIO_Init+0x80>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <MX_GPIO_Init+0x80>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <MX_GPIO_Init+0x80>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_GPIO_Init+0x80>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a11      	ldr	r2, [pc, #68]	@ (8001564 <MX_GPIO_Init+0x80>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_GPIO_Init+0x80>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <MX_GPIO_Init+0x84>)
 800153a:	f000 fd29 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800153e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4804      	ldr	r0, [pc, #16]	@ (8001568 <MX_GPIO_Init+0x84>)
 8001558:	f000 fb96 	bl	8001c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020800 	.word	0x40020800

0800156c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800157c:	d101      	bne.n	8001582 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800157e:	f000 f9ef 	bl	8001960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158e:	b672      	cpsid	i
}
 8001590:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001592:	bf00      	nop
 8001594:	e7fd      	b.n	8001592 <Error_Handler+0x8>
	...

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <HAL_RTC_MspInit+0x50>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d111      	bne.n	800162e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800160a:	2302      	movs	r3, #2
 800160c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800160e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001612:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4618      	mov	r0, r3
 800161a:	f001 f977 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001624:	f7ff ffb1 	bl	800158a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_RTC_MspInit+0x54>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40002800 	.word	0x40002800
 800163c:	42470e3c 	.word	0x42470e3c

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1d      	ldr	r2, [pc, #116]	@ (80016d4 <HAL_UART_MspInit+0x94>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d134      	bne.n	80016cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_UART_MspInit+0x98>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <HAL_UART_MspInit+0x98>)
 800166c:	f043 0320 	orr.w	r3, r3, #32
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_UART_MspInit+0x98>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_UART_MspInit+0x98>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <HAL_UART_MspInit+0x98>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_UART_MspInit+0x98>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800169a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016ac:	2308      	movs	r3, #8
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4809      	ldr	r0, [pc, #36]	@ (80016dc <HAL_UART_MspInit+0x9c>)
 80016b8:	f000 fae6 	bl	8001c88 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2108      	movs	r1, #8
 80016c0:	2047      	movs	r0, #71	@ 0x47
 80016c2:	f000 fa25 	bl	8001b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016c6:	2047      	movs	r0, #71	@ 0x47
 80016c8:	f000 fa3e 	bl	8001b48 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	@ 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40011400 	.word	0x40011400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	@ 0x38
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_InitTick+0xe8>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	4a33      	ldr	r2, [pc, #204]	@ (80017c8 <HAL_InitTick+0xe8>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_InitTick+0xe8>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800170c:	f107 0210 	add.w	r2, r7, #16
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f001 f8c6 	bl	80028a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001726:	f001 f897 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 800172a:	6378      	str	r0, [r7, #52]	@ 0x34
 800172c:	e004      	b.n	8001738 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800172e:	f001 f893 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8001732:	4603      	mov	r3, r0
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800173a:	4a24      	ldr	r2, [pc, #144]	@ (80017cc <HAL_InitTick+0xec>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9b      	lsrs	r3, r3, #18
 8001742:	3b01      	subs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001746:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <HAL_InitTick+0xf0>)
 8001748:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800174c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_InitTick+0xf0>)
 8001750:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001754:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_InitTick+0xf0>)
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800175c:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_InitTick+0xf0>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_InitTick+0xf0>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_InitTick+0xf0>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800176e:	4818      	ldr	r0, [pc, #96]	@ (80017d0 <HAL_InitTick+0xf0>)
 8001770:	f001 fc42 	bl	8002ff8 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800177a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800177e:	2b00      	cmp	r3, #0
 8001780:	d11b      	bne.n	80017ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001782:	4813      	ldr	r0, [pc, #76]	@ (80017d0 <HAL_InitTick+0xf0>)
 8001784:	f001 fc92 	bl	80030ac <HAL_TIM_Base_Start_IT>
 8001788:	4603      	mov	r3, r0
 800178a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800178e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001792:	2b00      	cmp	r3, #0
 8001794:	d111      	bne.n	80017ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001796:	201c      	movs	r0, #28
 8001798:	f000 f9d6 	bl	8001b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d808      	bhi.n	80017b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80017a2:	2200      	movs	r2, #0
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	201c      	movs	r0, #28
 80017a8:	f000 f9b2 	bl	8001b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ac:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_InitTick+0xf4>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e002      	b.n	80017ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3738      	adds	r7, #56	@ 0x38
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	200001a0 	.word	0x200001a0
 80017d4:	20000020 	.word	0x20000020

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <NMI_Handler+0x4>

080017e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <MemManage_Handler+0x4>

080017f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <UsageFault_Handler+0x4>

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <TIM2_IRQHandler+0x10>)
 8001816:	f001 fcab 	bl	8003170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001a0 	.word	0x200001a0

08001824 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <USART6_IRQHandler+0x10>)
 800182a:	f001 ff59 	bl	80036e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000128 	.word	0x20000128

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f005 ff5a 	bl	8007720 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20010000 	.word	0x20010000
 8001898:	00000400 	.word	0x00000400
 800189c:	200001e8 	.word	0x200001e8
 80018a0:	200054a8 	.word	0x200054a8

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018cc:	f7ff ffea 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f005 ff19 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff fc2d 	bl	8001158 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800190c:	08008564 	.word	0x08008564
  ldr r2, =_sbss
 8001910:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001914:	200054a8 	.word	0x200054a8

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <HAL_Init+0x40>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <HAL_Init+0x40>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a07      	ldr	r2, [pc, #28]	@ (800195c <HAL_Init+0x40>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f8d8 	bl	8001afa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194a:	200f      	movs	r0, #15
 800194c:	f7ff fec8 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001950:	f7ff fe22 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000024 	.word	0x20000024
 8001984:	200001ec 	.word	0x200001ec

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200001ec 	.word	0x200001ec

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	@ (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff4c 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b22:	f7ff ff61 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	6978      	ldr	r0, [r7, #20]
 8001b2e:	f7ff ffb1 	bl	8001a94 <NVIC_EncodePriority>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff80 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff54 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b72:	f7ff ff09 	bl	8001988 <HAL_GetTick>
 8001b76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d008      	beq.n	8001b96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2280      	movs	r2, #128	@ 0x80
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e052      	b.n	8001c3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0216 	bic.w	r2, r2, #22
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d103      	bne.n	8001bc6 <HAL_DMA_Abort+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0208 	bic.w	r2, r2, #8
 8001bd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be6:	e013      	b.n	8001c10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be8:	f7ff fece 	bl	8001988 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d90c      	bls.n	8001c10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e015      	b.n	8001c3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e4      	bne.n	8001be8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c22:	223f      	movs	r2, #63	@ 0x3f
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00c      	b.n	8001c7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2205      	movs	r2, #5
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e159      	b.n	8001f58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8148 	bne.w	8001f52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d005      	beq.n	8001cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d130      	bne.n	8001d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d017      	beq.n	8001d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d123      	bne.n	8001dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a2 	beq.w	8001f52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b57      	ldr	r3, [pc, #348]	@ (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a56      	ldr	r2, [pc, #344]	@ (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2a:	4a52      	ldr	r2, [pc, #328]	@ (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a49      	ldr	r2, [pc, #292]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x202>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a48      	ldr	r2, [pc, #288]	@ (8001f7c <HAL_GPIO_Init+0x2f4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x1fe>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a47      	ldr	r2, [pc, #284]	@ (8001f80 <HAL_GPIO_Init+0x2f8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a46      	ldr	r2, [pc, #280]	@ (8001f84 <HAL_GPIO_Init+0x2fc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x1f6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a45      	ldr	r2, [pc, #276]	@ (8001f88 <HAL_GPIO_Init+0x300>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x1f2>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e008      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x204>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4093      	lsls	r3, r2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e9c:	4935      	ldr	r1, [pc, #212]	@ (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b38      	ldr	r3, [pc, #224]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a24      	ldr	r2, [pc, #144]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001efe:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f22:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	f67f aea2 	bls.w	8001ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3724      	adds	r7, #36	@ 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	041a      	lsls	r2, r3, #16
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e267      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d075      	beq.n	8002102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002016:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d00c      	beq.n	800203c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002022:	4b85      	ldr	r3, [pc, #532]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800202a:	2b08      	cmp	r3, #8
 800202c:	d112      	bne.n	8002054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202e:	4b82      	ldr	r3, [pc, #520]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203a:	d10b      	bne.n	8002054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	4b7e      	ldr	r3, [pc, #504]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x108>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d157      	bne.n	8002100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e242      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x74>
 800205e:	4b76      	ldr	r3, [pc, #472]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a75      	ldr	r2, [pc, #468]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b70      	ldr	r3, [pc, #448]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6f      	ldr	r2, [pc, #444]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6d      	ldr	r3, [pc, #436]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6c      	ldr	r2, [pc, #432]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 8002090:	4b69      	ldr	r3, [pc, #420]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a68      	ldr	r2, [pc, #416]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b66      	ldr	r3, [pc, #408]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a65      	ldr	r2, [pc, #404]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fc6a 	bl	8001988 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fc66 	bl	8001988 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e207      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fc56 	bl	8001988 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fc52 	bl	8001988 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1f3      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0xe8>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800210e:	4b4a      	ldr	r3, [pc, #296]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211a:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002126:	4b44      	ldr	r3, [pc, #272]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x152>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1c7      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4937      	ldr	r1, [pc, #220]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e03a      	b.n	80021d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b34      	ldr	r3, [pc, #208]	@ (800223c <HAL_RCC_OscConfig+0x244>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7ff fc0b 	bl	8001988 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff fc07 	bl	8001988 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1a8      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4925      	ldr	r1, [pc, #148]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e015      	b.n	80021d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_RCC_OscConfig+0x244>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff fbea 	bl	8001988 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff fbe6 	bl	8001988 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e187      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d036      	beq.n	8002250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_RCC_OscConfig+0x248>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff fbca 	bl	8001988 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7ff fbc6 	bl	8001988 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e167      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_RCC_OscConfig+0x240>)
 800220c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x200>
 8002216:	e01b      	b.n	8002250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_OscConfig+0x248>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff fbb3 	bl	8001988 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	e00e      	b.n	8002244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7ff fbaf 	bl	8001988 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d907      	bls.n	8002244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e150      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
 8002238:	40023800 	.word	0x40023800
 800223c:	42470000 	.word	0x42470000
 8002240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b88      	ldr	r3, [pc, #544]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ea      	bne.n	8002226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8097 	beq.w	800238c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b81      	ldr	r3, [pc, #516]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	4b7d      	ldr	r3, [pc, #500]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4a7c      	ldr	r2, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	@ 0x40
 800227e:	4b7a      	ldr	r3, [pc, #488]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b77      	ldr	r3, [pc, #476]	@ (800246c <HAL_RCC_OscConfig+0x474>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b74      	ldr	r3, [pc, #464]	@ (800246c <HAL_RCC_OscConfig+0x474>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a73      	ldr	r2, [pc, #460]	@ (800246c <HAL_RCC_OscConfig+0x474>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fb6f 	bl	8001988 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7ff fb6b 	bl	8001988 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e10c      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_OscConfig+0x474>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x2ea>
 80022d4:	4b64      	ldr	r3, [pc, #400]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a63      	ldr	r2, [pc, #396]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e0:	e01c      	b.n	800231c <HAL_RCC_OscConfig+0x324>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x30c>
 80022ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6713      	str	r3, [r2, #112]	@ 0x70
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0x324>
 8002304:	4b58      	ldr	r3, [pc, #352]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002308:	4a57      	ldr	r2, [pc, #348]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002310:	4b55      	ldr	r3, [pc, #340]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002314:	4a54      	ldr	r2, [pc, #336]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002316:	f023 0304 	bic.w	r3, r3, #4
 800231a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d015      	beq.n	8002350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7ff fb30 	bl	8001988 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7ff fb2c 	bl	8001988 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0cb      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	4b49      	ldr	r3, [pc, #292]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0ee      	beq.n	800232c <HAL_RCC_OscConfig+0x334>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fb1a 	bl	8001988 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002356:	e00a      	b.n	800236e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7ff fb16 	bl	8001988 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0b5      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ee      	bne.n	8002358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	4a38      	ldr	r2, [pc, #224]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a1 	beq.w	80024d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002396:	4b34      	ldr	r3, [pc, #208]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d05c      	beq.n	800245c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d141      	bne.n	800242e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <HAL_RCC_OscConfig+0x478>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff faea 	bl	8001988 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff fae6 	bl	8001988 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e087      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	4b27      	ldr	r3, [pc, #156]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	085b      	lsrs	r3, r3, #1
 80023ee:	3b01      	subs	r3, #1
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	491b      	ldr	r1, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_RCC_OscConfig+0x478>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff fabf 	bl	8001988 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7ff fabb 	bl	8001988 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e05c      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x416>
 800242c:	e054      	b.n	80024d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_RCC_OscConfig+0x478>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff faa8 	bl	8001988 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7ff faa4 	bl	8001988 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e045      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_RCC_OscConfig+0x470>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x444>
 800245a:	e03d      	b.n	80024d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e038      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000
 8002470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x4ec>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d028      	beq.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d121      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d11a      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d111      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800

080024e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0cc      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d90c      	bls.n	8002524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b65      	ldr	r3, [pc, #404]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b63      	ldr	r3, [pc, #396]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b8      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a58      	ldr	r2, [pc, #352]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002554:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a52      	ldr	r2, [pc, #328]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800255e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b50      	ldr	r3, [pc, #320]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	494d      	ldr	r1, [pc, #308]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d044      	beq.n	8002608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b47      	ldr	r3, [pc, #284]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d119      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b3f      	ldr	r3, [pc, #252]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e067      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4934      	ldr	r1, [pc, #208]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7ff f9d6 	bl	8001988 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff f9d2 	bl	8001988 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e04f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d20c      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e032      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4916      	ldr	r1, [pc, #88]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	490e      	ldr	r1, [pc, #56]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266e:	f000 f821 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	490a      	ldr	r1, [pc, #40]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a09      	ldr	r2, [pc, #36]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f826 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00
 80026a4:	40023800 	.word	0x40023800
 80026a8:	08008508 	.word	0x08008508
 80026ac:	2000001c 	.word	0x2000001c
 80026b0:	20000020 	.word	0x20000020

080026b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b8:	b090      	sub	sp, #64	@ 0x40
 80026ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026cc:	4b59      	ldr	r3, [pc, #356]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d00d      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x40>
 80026d8:	2b08      	cmp	r3, #8
 80026da:	f200 80a1 	bhi.w	8002820 <HAL_RCC_GetSysClockFreq+0x16c>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x34>
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x3a>
 80026e6:	e09b      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x184>)
 80026ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026ec:	e09b      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ee:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_RCC_GetSysClockFreq+0x188>)
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026f2:	e098      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x180>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d028      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270a:	4b4a      	ldr	r3, [pc, #296]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x180>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	2200      	movs	r2, #0
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	627a      	str	r2, [r7, #36]	@ 0x24
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800271c:	2100      	movs	r1, #0
 800271e:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_GetSysClockFreq+0x188>)
 8002720:	fb03 f201 	mul.w	r2, r3, r1
 8002724:	2300      	movs	r3, #0
 8002726:	fb00 f303 	mul.w	r3, r0, r3
 800272a:	4413      	add	r3, r2
 800272c:	4a43      	ldr	r2, [pc, #268]	@ (800283c <HAL_RCC_GetSysClockFreq+0x188>)
 800272e:	fba0 1202 	umull	r1, r2, r0, r2
 8002732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002734:	460a      	mov	r2, r1
 8002736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800273a:	4413      	add	r3, r2
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	2200      	movs	r2, #0
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	61fa      	str	r2, [r7, #28]
 8002746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800274e:	f7fd fdaf 	bl	80002b0 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4613      	mov	r3, r2
 8002758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275a:	e053      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275c:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	2200      	movs	r2, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	617a      	str	r2, [r7, #20]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800276e:	f04f 0b00 	mov.w	fp, #0
 8002772:	4652      	mov	r2, sl
 8002774:	465b      	mov	r3, fp
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	ebb2 080a 	subs.w	r8, r2, sl
 800278e:	eb63 090b 	sbc.w	r9, r3, fp
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800279e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027a6:	ebb2 0408 	subs.w	r4, r2, r8
 80027aa:	eb63 0509 	sbc.w	r5, r3, r9
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	00eb      	lsls	r3, r5, #3
 80027b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027bc:	00e2      	lsls	r2, r4, #3
 80027be:	4614      	mov	r4, r2
 80027c0:	461d      	mov	r5, r3
 80027c2:	eb14 030a 	adds.w	r3, r4, sl
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	eb45 030b 	adc.w	r3, r5, fp
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e4:	4621      	mov	r1, r4
 80027e6:	028a      	lsls	r2, r1, #10
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ee:	2200      	movs	r2, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	60fa      	str	r2, [r7, #12]
 80027f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027f8:	f7fd fd5a 	bl	80002b0 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x184>)
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002828:	4618      	mov	r0, r3
 800282a:	3740      	adds	r7, #64	@ 0x40
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800
 8002838:	00f42400 	.word	0x00f42400
 800283c:	017d7840 	.word	0x017d7840

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	2000001c 	.word	0x2000001c

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0a9b      	lsrs	r3, r3, #10
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	@ (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	08008518 	.word	0x08008518

08002880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002884:	f7ff ffdc 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0b5b      	lsrs	r3, r3, #13
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	@ (80028a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08008518 	.word	0x08008518

080028a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	220f      	movs	r2, #15
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0203 	and.w	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <HAL_RCC_GetClockConfig+0x60>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0207 	and.w	r2, r3, #7
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40023c00 	.word	0x40023c00

0800290c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002930:	2b00      	cmp	r3, #0
 8002932:	d035      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002934:	4b67      	ldr	r3, [pc, #412]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800293a:	f7ff f825 	bl	8001988 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002942:	f7ff f821 	bl	8001988 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0ba      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002954:	4b60      	ldr	r3, [pc, #384]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	019a      	lsls	r2, r3, #6
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	071b      	lsls	r3, r3, #28
 800296c:	495a      	ldr	r1, [pc, #360]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002974:	4b57      	ldr	r3, [pc, #348]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800297a:	f7ff f805 	bl	8001988 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002982:	f7ff f801 	bl	8001988 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e09a      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002994:	4b50      	ldr	r3, [pc, #320]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8083 	beq.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b49      	ldr	r3, [pc, #292]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	4a48      	ldr	r2, [pc, #288]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029be:	4b46      	ldr	r3, [pc, #280]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029ca:	4b44      	ldr	r3, [pc, #272]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a43      	ldr	r2, [pc, #268]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029d6:	f7fe ffd7 	bl	8001988 <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe ffd3 	bl	8001988 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e06c      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80029f0:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029fc:	4b36      	ldr	r3, [pc, #216]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a04:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02f      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d028      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a30:	4a29      	ldr	r2, [pc, #164]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a36:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d114      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe ffa1 	bl	8001988 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe ff9d 	bl	8001988 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e034      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ee      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a78:	d10d      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8e:	4912      	ldr	r1, [pc, #72]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
 8002a94:	e005      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a9c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002aa0:	6093      	str	r3, [r2, #8]
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aa4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aae:	490a      	ldr	r1, [pc, #40]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7c1a      	ldrb	r2, [r3, #16]
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ac6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	42470068 	.word	0x42470068
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	42470e40 	.word	0x42470e40
 8002ae4:	424711e0 	.word	0x424711e0

08002ae8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7f5b      	ldrb	r3, [r3, #29]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fd6a 	bl	80015e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d055      	beq.n	8002bd4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	22ca      	movs	r2, #202	@ 0xca
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2253      	movs	r2, #83	@ 0x53
 8002b36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9c5 	bl	8002ec8 <RTC_EnterInitMode>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d12c      	bne.n	8002ba2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b5a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	041a      	lsls	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f9cc 	bl	8002f36 <RTC_ExitInitMode>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d110      	bne.n	8002bca <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	22ff      	movs	r2, #255	@ 0xff
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bd2:	e001      	b.n	8002bd8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bee:	b590      	push	{r4, r7, lr}
 8002bf0:	b087      	sub	sp, #28
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_RTC_SetTime+0x1c>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e087      	b.n	8002d1a <HAL_RTC_SetTime+0x12c>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2202      	movs	r2, #2
 8002c14:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d126      	bne.n	8002c6a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f9a3 	bl	8002f80 <RTC_ByteToBcd2>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	785b      	ldrb	r3, [r3, #1]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f99c 	bl	8002f80 <RTC_ByteToBcd2>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c4c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f994 	bl	8002f80 <RTC_ByteToBcd2>
 8002c58:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c5a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e018      	b.n	8002c9c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c8a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002c90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	78db      	ldrb	r3, [r3, #3]
 8002c96:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	22ca      	movs	r2, #202	@ 0xca
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2253      	movs	r2, #83	@ 0x53
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f90b 	bl	8002ec8 <RTC_EnterInitMode>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d120      	bne.n	8002cfe <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002cc6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002cca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cda:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f91e 	bl	8002f36 <RTC_ExitInitMode>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	22ff      	movs	r2, #255	@ 0xff
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]

  return status;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}

08002d22 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002d54:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002d58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	0d9b      	lsrs	r3, r3, #22
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f90a 	bl	8002fbc <RTC_Bcd2ToByte>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f901 	bl	8002fbc <RTC_Bcd2ToByte>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	789b      	ldrb	r3, [r3, #2]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f8f8 	bl	8002fbc <RTC_Bcd2ToByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002df8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	0b5b      	lsrs	r3, r3, #13
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11a      	bne.n	8002e72 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	78db      	ldrb	r3, [r3, #3]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f8bb 	bl	8002fbc <RTC_Bcd2ToByte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f8b2 	bl	8002fbc <RTC_Bcd2ToByte>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	789b      	ldrb	r3, [r3, #2]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f8a9 	bl	8002fbc <RTC_Bcd2ToByte>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <HAL_RTC_WaitForSynchro+0x48>)
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7fe fd7a 	bl	8001988 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e96:	e009      	b.n	8002eac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e98:	f7fe fd76 	bl	8001988 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ea6:	d901      	bls.n	8002eac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e007      	b.n	8002ebc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00013f5f 	.word	0x00013f5f

08002ec8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d122      	bne.n	8002f2c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ef4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe fd47 	bl	8001988 <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002efc:	e00c      	b.n	8002f18 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002efe:	f7fe fd43 	bl	8001988 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f0c:	d904      	bls.n	8002f18 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <RTC_EnterInitMode+0x64>
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d1e8      	bne.n	8002efe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff8b 	bl	8002e7c <HAL_RTC_WaitForSynchro>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002f8e:	e005      	b.n	8002f9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	3b0a      	subs	r3, #10
 8002f9a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d8f6      	bhi.n	8002f90 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	b2db      	uxtb	r3, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	b2db      	uxtb	r3, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f839 	bl	8003096 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 f9b2 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d001      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e044      	b.n	800314e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_TIM_Base_Start_IT+0xb0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d018      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x6c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ee:	d013      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x6c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003160 <HAL_TIM_Base_Start_IT+0xb4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x6c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <HAL_TIM_Base_Start_IT+0xb8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d009      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x6c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <HAL_TIM_Base_Start_IT+0xbc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x6c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a16      	ldr	r2, [pc, #88]	@ (800316c <HAL_TIM_Base_Start_IT+0xc0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d010      	beq.n	800314c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313a:	e007      	b.n	800314c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40014000 	.word	0x40014000

08003170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8d2 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8c4 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8d5 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0204 	mvn.w	r2, #4
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8ac 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f89e 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8af 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0208 	mvn.w	r2, #8
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f886 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f878 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f889 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01b      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0210 	mvn.w	r2, #16
 8003288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2208      	movs	r2, #8
 800328e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f860 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f852 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f863 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f948 	bl	800156c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8e6 	bl	80034cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f834 	bl	800338c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0220 	mvn.w	r2, #32
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8b8 	bl	80034b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	@ (800349c <TIM_Base_SetConfig+0xfc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a37      	ldr	r2, [pc, #220]	@ (80034a0 <TIM_Base_SetConfig+0x100>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <TIM_Base_SetConfig+0x104>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a35      	ldr	r2, [pc, #212]	@ (80034a8 <TIM_Base_SetConfig+0x108>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <TIM_Base_SetConfig+0xfc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01b      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f8:	d017      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <TIM_Base_SetConfig+0x100>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <TIM_Base_SetConfig+0x104>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a26      	ldr	r2, [pc, #152]	@ (80034a8 <TIM_Base_SetConfig+0x108>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <TIM_Base_SetConfig+0x10c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <TIM_Base_SetConfig+0x110>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a23      	ldr	r2, [pc, #140]	@ (80034b4 <TIM_Base_SetConfig+0x114>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0e      	ldr	r2, [pc, #56]	@ (800349c <TIM_Base_SetConfig+0xfc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d105      	bne.n	800348e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f023 0201 	bic.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	611a      	str	r2, [r3, #16]
  }
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800

080034b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e042      	b.n	8003578 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe f89a 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2224      	movs	r2, #36	@ 0x24
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fdbd 	bl	80040a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b20      	cmp	r3, #32
 800359e:	d175      	bne.n	800368c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_UART_Transmit+0x2c>
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e06e      	b.n	800368e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2221      	movs	r2, #33	@ 0x21
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035be:	f7fe f9e3 	bl	8001988 <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d8:	d108      	bne.n	80035ec <HAL_UART_Transmit+0x6c>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e003      	b.n	80035f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035f4:	e02e      	b.n	8003654 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	@ 0x80
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fb1f 	bl	8003c44 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e03a      	b.n	800368e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3302      	adds	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e007      	b.n	8003646 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3301      	adds	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1cb      	bne.n	80035f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	@ 0x40
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 faeb 	bl	8003c44 <UART_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d112      	bne.n	80036d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_UART_Receive_IT+0x26>
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e00b      	b.n	80036d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	461a      	mov	r2, r3
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fb12 	bl	8003cf6 <UART_Start_Receive_IT>
 80036d2:	4603      	mov	r3, r0
 80036d4:	e000      	b.n	80036d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0ba      	sub	sp, #232	@ 0xe8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_UART_IRQHandler+0x66>
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fbf2 	bl	8003f28 <UART_Receive_IT>
      return;
 8003744:	e25b      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80de 	beq.w	800390c <HAL_UART_IRQHandler+0x22c>
 8003750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003760:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80d1 	beq.w	800390c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0xae>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_UART_IRQHandler+0xd2>
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_UART_IRQHandler+0xf6>
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f043 0204 	orr.w	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d011      	beq.n	8003806 <HAL_UART_IRQHandler+0x126>
 80037e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	f043 0208 	orr.w	r2, r3, #8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 81f2 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x14e>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb7d 	bl	8003f28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_UART_IRQHandler+0x17a>
 8003852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04f      	beq.n	80038fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa85 	bl	8003d6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b40      	cmp	r3, #64	@ 0x40
 800386c:	d141      	bne.n	80038f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800389a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d9      	bne.n	800386e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ac0 <HAL_UART_IRQHandler+0x3e0>)
 80038c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe f9b8 	bl	8001c44 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00e      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f994 	bl	8003c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e00a      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f990 	bl	8003c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e006      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f98c 	bl	8003c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003906:	e175      	b.n	8003bf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	bf00      	nop
    return;
 800390a:	e173      	b.n	8003bf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	2b01      	cmp	r3, #1
 8003912:	f040 814f 	bne.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8148 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8141 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	f040 80b6 	bne.w	8003ac4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8145 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003976:	429a      	cmp	r2, r3
 8003978:	f080 813e 	bcs.w	8003bf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003982:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398e:	f000 8088 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1d9      	bne.n	8003992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e1      	bne.n	80039de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3314      	adds	r3, #20
 8003a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e3      	bne.n	8003a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e3      	bne.n	8003a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe f861 	bl	8001b64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8b7 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003abe:	e09b      	b.n	8003bf8 <HAL_UART_IRQHandler+0x518>
 8003ac0:	08003e31 	.word	0x08003e31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 808e 	beq.w	8003bfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8089 	beq.w	8003bfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	623b      	str	r3, [r7, #32]
   return(result);
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f83d 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb2:	e023      	b.n	8003bfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x4f4>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f943 	bl	8003e58 <UART_Transmit_IT>
    return;
 8003bd2:	e014      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <HAL_UART_IRQHandler+0x51e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f983 	bl	8003ef8 <UART_EndTransmit_IT>
    return;
 8003bf2:	e004      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf4:	bf00      	nop
 8003bf6:	e002      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003bfc:	bf00      	nop
  }
}
 8003bfe:	37e8      	adds	r7, #232	@ 0xe8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c54:	e03b      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d037      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fd fe93 	bl	8001988 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e03a      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d023      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b80      	cmp	r3, #128	@ 0x80
 8003c8a:	d020      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d01d      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d116      	bne.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f857 	bl	8003d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00f      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d0b4      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2222      	movs	r2, #34	@ 0x22
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0220 	orr.w	r2, r2, #32
 8003d5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b095      	sub	sp, #84	@ 0x54
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d92:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d119      	bne.n	8003e16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e02:	61ba      	str	r2, [r7, #24]
 8003e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6979      	ldr	r1, [r7, #20]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e24:	bf00      	nop
 8003e26:	3754      	adds	r7, #84	@ 0x54
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fee4 	bl	8003c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b21      	cmp	r3, #33	@ 0x21
 8003e6a:	d13e      	bne.n	8003eea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e74:	d114      	bne.n	8003ea0 <UART_Transmit_IT+0x48>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d110      	bne.n	8003ea0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]
 8003e9e:	e008      	b.n	8003eb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	1c59      	adds	r1, r3, #1
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6211      	str	r1, [r2, #32]
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ed4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff fe73 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	@ 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b22      	cmp	r3, #34	@ 0x22
 8003f3a:	f040 80ae 	bne.w	800409a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	d117      	bne.n	8003f78 <UART_Receive_IT+0x50>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d113      	bne.n	8003f78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f76:	e026      	b.n	8003fc6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8a:	d007      	beq.n	8003f9c <UART_Receive_IT+0x74>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <UART_Receive_IT+0x82>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e008      	b.n	8003fbc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d15d      	bne.n	8004096 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0220 	bic.w	r2, r2, #32
 8003fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	2b01      	cmp	r3, #1
 800401e:	d135      	bne.n	800408c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	613b      	str	r3, [r7, #16]
   return(result);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004046:	623a      	str	r2, [r7, #32]
 8004048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	61bb      	str	r3, [r7, #24]
   return(result);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d10a      	bne.n	800407e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fdd1 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
 800408a:	e002      	b.n	8004092 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7fd f821 	bl	80010d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e002      	b.n	800409c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	3730      	adds	r7, #48	@ 0x30
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a8:	b0c0      	sub	sp, #256	@ 0x100
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	68d9      	ldr	r1, [r3, #12]
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	ea40 0301 	orr.w	r3, r0, r1
 80040cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040fc:	f021 010c 	bic.w	r1, r1, #12
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800410a:	430b      	orrs	r3, r1
 800410c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	6999      	ldr	r1, [r3, #24]
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	ea40 0301 	orr.w	r3, r0, r1
 800412a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b8f      	ldr	r3, [pc, #572]	@ (8004370 <UART_SetConfig+0x2cc>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d005      	beq.n	8004144 <UART_SetConfig+0xa0>
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b8d      	ldr	r3, [pc, #564]	@ (8004374 <UART_SetConfig+0x2d0>)
 8004140:	429a      	cmp	r2, r3
 8004142:	d104      	bne.n	800414e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe fb9c 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 8004148:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800414c:	e003      	b.n	8004156 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800414e:	f7fe fb83 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8004152:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004160:	f040 810c 	bne.w	800437c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800416e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004172:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	1891      	adds	r1, r2, r2
 800417c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800417e:	415b      	adcs	r3, r3
 8004180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004182:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004186:	4621      	mov	r1, r4
 8004188:	eb12 0801 	adds.w	r8, r2, r1
 800418c:	4629      	mov	r1, r5
 800418e:	eb43 0901 	adc.w	r9, r3, r1
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a6:	4690      	mov	r8, r2
 80041a8:	4699      	mov	r9, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	eb18 0303 	adds.w	r3, r8, r3
 80041b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041b4:	462b      	mov	r3, r5
 80041b6:	eb49 0303 	adc.w	r3, r9, r3
 80041ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041d2:	460b      	mov	r3, r1
 80041d4:	18db      	adds	r3, r3, r3
 80041d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d8:	4613      	mov	r3, r2
 80041da:	eb42 0303 	adc.w	r3, r2, r3
 80041de:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041e8:	f7fc f862 	bl	80002b0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4b61      	ldr	r3, [pc, #388]	@ (8004378 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2302 	umull	r2, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	011c      	lsls	r4, r3, #4
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004204:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004208:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004214:	415b      	adcs	r3, r3
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800421c:	4641      	mov	r1, r8
 800421e:	eb12 0a01 	adds.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb43 0b01 	adc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004234:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423c:	4692      	mov	sl, r2
 800423e:	469b      	mov	fp, r3
 8004240:	4643      	mov	r3, r8
 8004242:	eb1a 0303 	adds.w	r3, sl, r3
 8004246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424a:	464b      	mov	r3, r9
 800424c:	eb4b 0303 	adc.w	r3, fp, r3
 8004250:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004260:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004264:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004268:	460b      	mov	r3, r1
 800426a:	18db      	adds	r3, r3, r3
 800426c:	643b      	str	r3, [r7, #64]	@ 0x40
 800426e:	4613      	mov	r3, r2
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	647b      	str	r3, [r7, #68]	@ 0x44
 8004276:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800427a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800427e:	f7fc f817 	bl	80002b0 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4611      	mov	r1, r2
 8004288:	4b3b      	ldr	r3, [pc, #236]	@ (8004378 <UART_SetConfig+0x2d4>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2264      	movs	r2, #100	@ 0x64
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800429e:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <UART_SetConfig+0x2d4>)
 80042a0:	fba3 2302 	umull	r2, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042ac:	441c      	add	r4, r3
 80042ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042c8:	415b      	adcs	r3, r3
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042d0:	4641      	mov	r1, r8
 80042d2:	1851      	adds	r1, r2, r1
 80042d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042d6:	4649      	mov	r1, r9
 80042d8:	414b      	adcs	r3, r1
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042e8:	4659      	mov	r1, fp
 80042ea:	00cb      	lsls	r3, r1, #3
 80042ec:	4651      	mov	r1, sl
 80042ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f2:	4651      	mov	r1, sl
 80042f4:	00ca      	lsls	r2, r1, #3
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	4642      	mov	r2, r8
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004304:	464b      	mov	r3, r9
 8004306:	460a      	mov	r2, r1
 8004308:	eb42 0303 	adc.w	r3, r2, r3
 800430c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800431c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004320:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004324:	460b      	mov	r3, r1
 8004326:	18db      	adds	r3, r3, r3
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432a:	4613      	mov	r3, r2
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004336:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800433a:	f7fb ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <UART_SetConfig+0x2d4>)
 8004344:	fba3 1302 	umull	r1, r3, r3, r2
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	2164      	movs	r1, #100	@ 0x64
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	3332      	adds	r3, #50	@ 0x32
 8004356:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <UART_SetConfig+0x2d4>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	f003 0207 	and.w	r2, r3, #7
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4422      	add	r2, r4
 800436a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800436c:	e106      	b.n	800457c <UART_SetConfig+0x4d8>
 800436e:	bf00      	nop
 8004370:	40011000 	.word	0x40011000
 8004374:	40011400 	.word	0x40011400
 8004378:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004386:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800438a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800438e:	4642      	mov	r2, r8
 8004390:	464b      	mov	r3, r9
 8004392:	1891      	adds	r1, r2, r2
 8004394:	6239      	str	r1, [r7, #32]
 8004396:	415b      	adcs	r3, r3
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
 800439a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800439e:	4641      	mov	r1, r8
 80043a0:	1854      	adds	r4, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb43 0501 	adc.w	r5, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	00eb      	lsls	r3, r5, #3
 80043b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b6:	00e2      	lsls	r2, r4, #3
 80043b8:	4614      	mov	r4, r2
 80043ba:	461d      	mov	r5, r3
 80043bc:	4643      	mov	r3, r8
 80043be:	18e3      	adds	r3, r4, r3
 80043c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c4:	464b      	mov	r3, r9
 80043c6:	eb45 0303 	adc.w	r3, r5, r3
 80043ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ea:	4629      	mov	r1, r5
 80043ec:	008b      	lsls	r3, r1, #2
 80043ee:	4621      	mov	r1, r4
 80043f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f4:	4621      	mov	r1, r4
 80043f6:	008a      	lsls	r2, r1, #2
 80043f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043fc:	f7fb ff58 	bl	80002b0 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4b60      	ldr	r3, [pc, #384]	@ (8004588 <UART_SetConfig+0x4e4>)
 8004406:	fba3 2302 	umull	r2, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	011c      	lsls	r4, r3, #4
 800440e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004418:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800441c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	61b9      	str	r1, [r7, #24]
 8004428:	415b      	adcs	r3, r3
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	6139      	str	r1, [r7, #16]
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004488:	4649      	mov	r1, r9
 800448a:	008b      	lsls	r3, r1, #2
 800448c:	4641      	mov	r1, r8
 800448e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004492:	4641      	mov	r1, r8
 8004494:	008a      	lsls	r2, r1, #2
 8004496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800449a:	f7fb ff09 	bl	80002b0 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	4b38      	ldr	r3, [pc, #224]	@ (8004588 <UART_SetConfig+0x4e4>)
 80044a6:	fba3 2301 	umull	r2, r3, r3, r1
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2264      	movs	r2, #100	@ 0x64
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	1acb      	subs	r3, r1, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	@ 0x32
 80044b8:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <UART_SetConfig+0x4e4>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c4:	441c      	add	r4, r3
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80044d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044d4:	4642      	mov	r2, r8
 80044d6:	464b      	mov	r3, r9
 80044d8:	1891      	adds	r1, r2, r2
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	415b      	adcs	r3, r3
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e4:	4641      	mov	r1, r8
 80044e6:	1851      	adds	r1, r2, r1
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	4649      	mov	r1, r9
 80044ec:	414b      	adcs	r3, r1
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044fc:	4659      	mov	r1, fp
 80044fe:	00cb      	lsls	r3, r1, #3
 8004500:	4651      	mov	r1, sl
 8004502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004506:	4651      	mov	r1, sl
 8004508:	00ca      	lsls	r2, r1, #3
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	4603      	mov	r3, r0
 8004510:	4642      	mov	r2, r8
 8004512:	189b      	adds	r3, r3, r2
 8004514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004516:	464b      	mov	r3, r9
 8004518:	460a      	mov	r2, r1
 800451a:	eb42 0303 	adc.w	r3, r2, r3
 800451e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	663b      	str	r3, [r7, #96]	@ 0x60
 800452a:	667a      	str	r2, [r7, #100]	@ 0x64
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004538:	4649      	mov	r1, r9
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	4641      	mov	r1, r8
 800453e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004542:	4641      	mov	r1, r8
 8004544:	008a      	lsls	r2, r1, #2
 8004546:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800454a:	f7fb feb1 	bl	80002b0 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <UART_SetConfig+0x4e4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	@ 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	3332      	adds	r3, #50	@ 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	@ (8004588 <UART_SetConfig+0x4e4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 020f 	and.w	r2, r3, #15
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004582:	46bd      	mov	sp, r7
 8004584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004588:	51eb851f 	.word	0x51eb851f

0800458c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f103 0208 	add.w	r2, r3, #8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f103 0208 	add.w	r2, r3, #8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f103 0208 	add.w	r2, r3, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d103      	bne.n	800464e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e00c      	b.n	8004668 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3308      	adds	r3, #8
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <vListInsert+0x2e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d2f6      	bcs.n	8004656 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6892      	ldr	r2, [r2, #8]
 80046b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6852      	ldr	r2, [r2, #4]
 80046c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d103      	bne.n	80046d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <xQueueGenericReset+0x30>
        __asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
    }
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05d      	beq.n	80047e6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800472e:	2b00      	cmp	r3, #0
 8004730:	d059      	beq.n	80047e6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	2100      	movs	r1, #0
 800473c:	fba3 2302 	umull	r2, r3, r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d000      	beq.n	8004746 <xQueueGenericReset+0x52>
 8004744:	2101      	movs	r1, #1
 8004746:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004748:	2b00      	cmp	r3, #0
 800474a:	d14c      	bne.n	80047e6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800474c:	f002 fcc6 	bl	80070dc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	6939      	ldr	r1, [r7, #16]
 800475a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	441a      	add	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2200      	movs	r2, #0
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	3b01      	subs	r3, #1
 800477e:	6939      	ldr	r1, [r7, #16]
 8004780:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	441a      	add	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	22ff      	movs	r2, #255	@ 0xff
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	22ff      	movs	r2, #255	@ 0xff
 8004798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d114      	bne.n	80047cc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01a      	beq.n	80047e0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3310      	adds	r3, #16
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f9dc 	bl	8005b6c <xTaskRemoveFromEventList>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d012      	beq.n	80047e0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80047ba:	4b16      	ldr	r3, [pc, #88]	@ (8004814 <xQueueGenericReset+0x120>)
 80047bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	e009      	b.n	80047e0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3310      	adds	r3, #16
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fedb 	bl	800458c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3324      	adds	r3, #36	@ 0x24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fed6 	bl	800458c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80047e0:	f002 fcae 	bl	8007140 <vPortExitCritical>
 80047e4:	e001      	b.n	80047ea <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xQueueGenericReset+0x114>
        __asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60bb      	str	r3, [r7, #8]
    }
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004808:	697b      	ldr	r3, [r7, #20]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02e      	beq.n	800488e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004830:	2100      	movs	r1, #0
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	fba3 2302 	umull	r2, r3, r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d000      	beq.n	8004840 <xQueueGenericCreate+0x28>
 800483e:	2101      	movs	r1, #1
 8004840:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004842:	2b00      	cmp	r3, #0
 8004844:	d123      	bne.n	800488e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800484e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004852:	d81c      	bhi.n	800488e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	3350      	adds	r3, #80	@ 0x50
 8004862:	4618      	mov	r0, r3
 8004864:	f002 fd64 	bl	8007330 <pvPortMalloc>
 8004868:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01d      	beq.n	80048ac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3350      	adds	r3, #80	@ 0x50
 8004878:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800487a:	79fa      	ldrb	r2, [r7, #7]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f815 	bl	80048b6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800488c:	e00e      	b.n	80048ac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <xQueueGenericCreate+0x94>
        __asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	613b      	str	r3, [r7, #16]
    }
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	e7fd      	b.n	80048a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80048ac:	69fb      	ldr	r3, [r7, #28]
    }
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e002      	b.n	80048d8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048e4:	2101      	movs	r1, #1
 80048e6:	69b8      	ldr	r0, [r7, #24]
 80048e8:	f7ff ff04 	bl	80046f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08e      	sub	sp, #56	@ 0x38
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800490a:	2300      	movs	r3, #0
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <xQueueGenericSend+0x34>
        __asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <xQueueGenericSend+0x42>
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericSend+0x46>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericSend+0x48>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <xQueueGenericSend+0x64>
        __asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d103      	bne.n	800496e <xQueueGenericSend+0x72>
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <xQueueGenericSend+0x76>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericSend+0x78>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <xQueueGenericSend+0x94>
        __asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	623b      	str	r3, [r7, #32]
    }
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004990:	f001 fb00 	bl	8005f94 <xTaskGetSchedulerState>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <xQueueGenericSend+0xa4>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <xQueueGenericSend+0xa8>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <xQueueGenericSend+0xaa>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <xQueueGenericSend+0xc6>
        __asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	61fb      	str	r3, [r7, #28]
    }
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80049c2:	f002 fb8b 	bl	80070dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <xQueueGenericSend+0xdc>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d129      	bne.n	8004a2c <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049de:	f000 fa46 	bl	8004e6e <prvCopyDataToQueue>
 80049e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d010      	beq.n	8004a0e <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	3324      	adds	r3, #36	@ 0x24
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 f8bb 	bl	8005b6c <xTaskRemoveFromEventList>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80049fc:	4b3f      	ldr	r3, [pc, #252]	@ (8004afc <xQueueGenericSend+0x200>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	e00a      	b.n	8004a24 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <xQueueGenericSend+0x200>)
 8004a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004a24:	f002 fb8c 	bl	8007140 <vPortExitCritical>
                return pdPASS;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e063      	b.n	8004af4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a32:	f002 fb85 	bl	8007140 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e05c      	b.n	8004af4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 f969 	bl	8005d1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a4e:	f002 fb77 	bl	8007140 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a52:	f000 fd85 	bl	8005560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a56:	f002 fb41 	bl	80070dc <vPortEnterCritical>
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d103      	bne.n	8004a70 <xQueueGenericSend+0x174>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d103      	bne.n	8004a86 <xQueueGenericSend+0x18a>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a86:	f002 fb5b 	bl	8007140 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a8a:	1d3a      	adds	r2, r7, #4
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 f958 	bl	8005d48 <xTaskCheckForTimeOut>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d124      	bne.n	8004ae8 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aa0:	f000 fadd 	bl	800505e <prvIsQueueFull>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	3310      	adds	r3, #16
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 ffee 	bl	8005a94 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aba:	f000 fa68 	bl	8004f8e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004abe:	f000 fd5d 	bl	800557c <xTaskResumeAll>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f47f af7c 	bne.w	80049c2 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8004aca:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <xQueueGenericSend+0x200>)
 8004acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	e772      	b.n	80049c2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ade:	f000 fa56 	bl	8004f8e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004ae2:	f000 fd4b 	bl	800557c <xTaskResumeAll>
 8004ae6:	e76c      	b.n	80049c2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aea:	f000 fa50 	bl	8004f8e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004aee:	f000 fd45 	bl	800557c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004af2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3738      	adds	r7, #56	@ 0x38
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	e000ed04 	.word	0xe000ed04

08004b00 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b092      	sub	sp, #72	@ 0x48
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8004b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10b      	bne.n	8004b30 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	e7fd      	b.n	8004b2c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <xQueueGenericSendFromISR+0x3e>
 8004b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <xQueueGenericSendFromISR+0x42>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericSendFromISR+0x44>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d103      	bne.n	8004b6e <xQueueGenericSendFromISR+0x6e>
 8004b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <xQueueGenericSendFromISR+0x72>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericSendFromISR+0x74>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b90:	f002 fb8c 	bl	80072ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004b94:	f3ef 8211 	mrs	r2, BASEPRI
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	623a      	str	r2, [r7, #32]
 8004baa:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004bac:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <xQueueGenericSendFromISR+0xc2>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d147      	bne.n	8004c52 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bc8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004bd8:	f000 f949 	bl	8004e6e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004bdc:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d112      	bne.n	8004c0c <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d02e      	beq.n	8004c4c <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf0:	3324      	adds	r3, #36	@ 0x24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 ffba 	bl	8005b6c <xTaskRemoveFromEventList>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d026      	beq.n	8004c4c <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d023      	beq.n	8004c4c <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e01f      	b.n	8004c4c <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004c0c:	f000 fdc2 	bl	8005794 <uxTaskGetNumberOfTasks>
 8004c10:	6338      	str	r0, [r7, #48]	@ 0x30
 8004c12:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d917      	bls.n	8004c4c <xQueueGenericSendFromISR+0x14c>
 8004c1c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c22:	d10b      	bne.n	8004c3c <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61bb      	str	r3, [r7, #24]
    }
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <xQueueGenericSendFromISR+0x138>
 8004c3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	b25a      	sxtb	r2, r3
 8004c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8004c50:	e001      	b.n	8004c56 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c58:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004c60:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3748      	adds	r7, #72	@ 0x48
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08c      	sub	sp, #48	@ 0x30
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <xQueueReceive+0x32>
        __asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	623b      	str	r3, [r7, #32]
    }
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <xQueueReceive+0x40>
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <xQueueReceive+0x44>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <xQueueReceive+0x46>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <xQueueReceive+0x62>
        __asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61fb      	str	r3, [r7, #28]
    }
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cce:	f001 f961 	bl	8005f94 <xTaskGetSchedulerState>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <xQueueReceive+0x72>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xQueueReceive+0x76>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueReceive+0x78>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <xQueueReceive+0x94>
        __asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	61bb      	str	r3, [r7, #24]
    }
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d00:	f002 f9ec 	bl	80070dc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01f      	beq.n	8004d50 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d14:	f000 f915 	bl	8004f42 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	1e5a      	subs	r2, r3, #1
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 ff1d 	bl	8005b6c <xTaskRemoveFromEventList>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d38:	4b3c      	ldr	r3, [pc, #240]	@ (8004e2c <xQueueReceive+0x1c0>)
 8004d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004d48:	f002 f9fa 	bl	8007140 <vPortExitCritical>
                return pdPASS;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e069      	b.n	8004e24 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d56:	f002 f9f3 	bl	8007140 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e062      	b.n	8004e24 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d64:	f107 0310 	add.w	r3, r7, #16
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 ffd7 	bl	8005d1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d72:	f002 f9e5 	bl	8007140 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d76:	f000 fbf3 	bl	8005560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d7a:	f002 f9af 	bl	80070dc <vPortEnterCritical>
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d84:	b25b      	sxtb	r3, r3
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d103      	bne.n	8004d94 <xQueueReceive+0x128>
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d103      	bne.n	8004daa <xQueueReceive+0x13e>
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004daa:	f002 f9c9 	bl	8007140 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dae:	1d3a      	adds	r2, r7, #4
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ffc6 	bl	8005d48 <xTaskCheckForTimeOut>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d123      	bne.n	8004e0a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc4:	f000 f935 	bl	8005032 <prvIsQueueEmpty>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	3324      	adds	r3, #36	@ 0x24
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fe5c 	bl	8005a94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dde:	f000 f8d6 	bl	8004f8e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004de2:	f000 fbcb 	bl	800557c <xTaskResumeAll>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d189      	bne.n	8004d00 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004dec:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <xQueueReceive+0x1c0>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	e780      	b.n	8004d00 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e00:	f000 f8c5 	bl	8004f8e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e04:	f000 fbba 	bl	800557c <xTaskResumeAll>
 8004e08:	e77a      	b.n	8004d00 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e0c:	f000 f8bf 	bl	8004f8e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e10:	f000 fbb4 	bl	800557c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e16:	f000 f90c 	bl	8005032 <prvIsQueueEmpty>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f43f af6f 	beq.w	8004d00 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004e22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3730      	adds	r7, #48	@ 0x30
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60bb      	str	r3, [r7, #8]
    }
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004e56:	f002 f941 	bl	80070dc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004e60:	f002 f96e 	bl	8007140 <vPortExitCritical>

    return uxReturn;
 8004e64:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10d      	bne.n	8004ea8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d14d      	bne.n	8004f30 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 f899 	bl	8005fd0 <xTaskPriorityDisinherit>
 8004e9e:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
 8004ea6:	e043      	b.n	8004f30 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d119      	bne.n	8004ee2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6858      	ldr	r0, [r3, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	f002 fc5d 	bl	8007778 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d32b      	bcc.n	8004f30 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	e026      	b.n	8004f30 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68d8      	ldr	r0, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	461a      	mov	r2, r3
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	f002 fc43 	bl	8007778 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	425b      	negs	r3, r3
 8004efc:	441a      	add	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d207      	bcs.n	8004f1e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	425b      	negs	r3, r3
 8004f18:	441a      	add	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d105      	bne.n	8004f30 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004f38:	697b      	ldr	r3, [r7, #20]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d018      	beq.n	8004f86 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d303      	bcc.n	8004f76 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68d9      	ldr	r1, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6838      	ldr	r0, [r7, #0]
 8004f82:	f002 fbf9 	bl	8007778 <memcpy>
    }
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004f96:	f002 f8a1 	bl	80070dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fa0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa2:	e011      	b.n	8004fc8 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3324      	adds	r3, #36	@ 0x24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fddb 	bl	8005b6c <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004fbc:	f000 ff2c 	bl	8005e18 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dce9      	bgt.n	8004fa4 <prvUnlockQueue+0x16>
 8004fd0:	e000      	b.n	8004fd4 <prvUnlockQueue+0x46>
                    break;
 8004fd2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	22ff      	movs	r2, #255	@ 0xff
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004fdc:	f002 f8b0 	bl	8007140 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004fe0:	f002 f87c 	bl	80070dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fea:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fec:	e011      	b.n	8005012 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d012      	beq.n	800501c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fdb6 	bl	8005b6c <xTaskRemoveFromEventList>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005006:	f000 ff07 	bl	8005e18 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	3b01      	subs	r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005016:	2b00      	cmp	r3, #0
 8005018:	dce9      	bgt.n	8004fee <prvUnlockQueue+0x60>
 800501a:	e000      	b.n	800501e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800501c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	22ff      	movs	r2, #255	@ 0xff
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005026:	f002 f88b 	bl	8007140 <vPortExitCritical>
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800503a:	f002 f84f 	bl	80070dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005046:	2301      	movs	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e001      	b.n	8005050 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005050:	f002 f876 	bl	8007140 <vPortExitCritical>

    return xReturn;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005066:	f002 f839 	bl	80070dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	429a      	cmp	r2, r3
 8005074:	d102      	bne.n	800507c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005076:	2301      	movs	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e001      	b.n	8005080 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005080:	f002 f85e 	bl	8007140 <vPortExitCritical>

    return xReturn;
 8005084:	68fb      	ldr	r3, [r7, #12]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800508e:	b480      	push	{r7}
 8005090:	b087      	sub	sp, #28
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
    }
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d102      	bne.n	80050ca <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e001      	b.n	80050ce <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80050ce:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
    }
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d024      	beq.n	8005158 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e01e      	b.n	8005152 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <vQueueAddToRegistry+0x9c>)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4413      	add	r3, r2
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d105      	bne.n	8005130 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <vQueueAddToRegistry+0x9c>)
 800512a:	4413      	add	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
                    break;
 800512e:	e013      	b.n	8005158 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <vQueueAddToRegistry+0x70>
 8005136:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <vQueueAddToRegistry+0x9c>)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <vQueueAddToRegistry+0x9c>)
 8005148:	4413      	add	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3301      	adds	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d9dd      	bls.n	8005114 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	200001f0 	.word	0x200001f0

0800517c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800518c:	f001 ffa6 	bl	80070dc <vPortEnterCritical>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005196:	b25b      	sxtb	r3, r3
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d103      	bne.n	80051a6 <vQueueWaitForMessageRestricted+0x2a>
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d103      	bne.n	80051bc <vQueueWaitForMessageRestricted+0x40>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051bc:	f001 ffc0 	bl	8007140 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	3324      	adds	r3, #36	@ 0x24
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fc85 	bl	8005ae0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80051d6:	6978      	ldr	r0, [r7, #20]
 80051d8:	f7ff fed9 	bl	8004f8e <prvUnlockQueue>
    }
 80051dc:	bf00      	nop
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	@ 0x30
 80051e8:	af04      	add	r7, sp, #16
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f002 f899 	bl	8007330 <pvPortMalloc>
 80051fe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d013      	beq.n	800522e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005206:	2058      	movs	r0, #88	@ 0x58
 8005208:	f002 f892 	bl	8007330 <pvPortMalloc>
 800520c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005214:	2258      	movs	r2, #88	@ 0x58
 8005216:	2100      	movs	r1, #0
 8005218:	69f8      	ldr	r0, [r7, #28]
 800521a:	f002 fa79 	bl	8007710 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30
 8005224:	e005      	b.n	8005232 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	f002 f93e 	bl	80074a8 <vPortFree>
 800522c:	e001      	b.n	8005232 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	2300      	movs	r3, #0
 800523c:	9303      	str	r3, [sp, #12]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f80e 	bl	8005270 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005254:	69f8      	ldr	r0, [r7, #28]
 8005256:	f000 f89b 	bl	8005390 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800525a:	2301      	movs	r3, #1
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e002      	b.n	8005266 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295
 8005264:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005266:	69bb      	ldr	r3, [r7, #24]
    }
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	461a      	mov	r2, r3
 8005288:	21a5      	movs	r1, #165	@ 0xa5
 800528a:	f002 fa41 	bl	8007710 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005298:	3b01      	subs	r3, #1
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <prvInitialiseNewTask+0x5a>
        __asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	617b      	str	r3, [r7, #20]
    }
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e012      	b.n	80052fc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	7819      	ldrb	r1, [r3, #0]
 80052de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	3334      	adds	r3, #52	@ 0x34
 80052e6:	460a      	mov	r2, r1
 80052e8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d9e9      	bls.n	80052d6 <prvInitialiseNewTask+0x66>
 8005302:	e000      	b.n	8005306 <prvInitialiseNewTask+0x96>
            {
                break;
 8005304:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	2b03      	cmp	r3, #3
 8005312:	d90b      	bls.n	800532c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
    }
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	2b03      	cmp	r3, #3
 8005330:	d901      	bls.n	8005336 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005332:	2303      	movs	r3, #3
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800533a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005340:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	3304      	adds	r3, #4
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff f940 	bl	80045cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	3318      	adds	r3, #24
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff f93b 	bl	80045cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800535a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	f1c3 0204 	rsb	r2, r3, #4
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800536a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	69b8      	ldr	r0, [r7, #24]
 8005372:	f001 fd83 	bl	8006e7c <pxPortInitialiseStack>
 8005376:	4602      	mov	r2, r0
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005386:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005388:	bf00      	nop
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005398:	f001 fea0 	bl	80070dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800539c:	4b40      	ldr	r3, [pc, #256]	@ (80054a0 <prvAddNewTaskToReadyList+0x110>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a3f      	ldr	r2, [pc, #252]	@ (80054a0 <prvAddNewTaskToReadyList+0x110>)
 80053a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80053a6:	4b3f      	ldr	r3, [pc, #252]	@ (80054a4 <prvAddNewTaskToReadyList+0x114>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80053ae:	4a3d      	ldr	r2, [pc, #244]	@ (80054a4 <prvAddNewTaskToReadyList+0x114>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053b4:	4b3a      	ldr	r3, [pc, #232]	@ (80054a0 <prvAddNewTaskToReadyList+0x110>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d110      	bne.n	80053de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80053bc:	f000 fd50 	bl	8005e60 <prvInitialiseTaskLists>
 80053c0:	e00d      	b.n	80053de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80053c2:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <prvAddNewTaskToReadyList+0x118>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ca:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <prvAddNewTaskToReadyList+0x114>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d802      	bhi.n	80053de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80053d8:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <prvAddNewTaskToReadyList+0x114>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80053de:	4b33      	ldr	r3, [pc, #204]	@ (80054ac <prvAddNewTaskToReadyList+0x11c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a31      	ldr	r2, [pc, #196]	@ (80054ac <prvAddNewTaskToReadyList+0x11c>)
 80053e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053e8:	4b30      	ldr	r3, [pc, #192]	@ (80054ac <prvAddNewTaskToReadyList+0x11c>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	409a      	lsls	r2, r3
 80053f8:	4b2d      	ldr	r3, [pc, #180]	@ (80054b0 <prvAddNewTaskToReadyList+0x120>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	4a2c      	ldr	r2, [pc, #176]	@ (80054b0 <prvAddNewTaskToReadyList+0x120>)
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005406:	492b      	ldr	r1, [pc, #172]	@ (80054b4 <prvAddNewTaskToReadyList+0x124>)
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	3304      	adds	r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	3204      	adds	r2, #4
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <prvAddNewTaskToReadyList+0x124>)
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	615a      	str	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	4918      	ldr	r1, [pc, #96]	@ (80054b4 <prvAddNewTaskToReadyList+0x124>)
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	4814      	ldr	r0, [pc, #80]	@ (80054b4 <prvAddNewTaskToReadyList+0x124>)
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4403      	add	r3, r0
 800546c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800546e:	f001 fe67 	bl	8007140 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005472:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <prvAddNewTaskToReadyList+0x118>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <prvAddNewTaskToReadyList+0x114>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d207      	bcs.n	8005498 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005488:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <prvAddNewTaskToReadyList+0x128>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	200002d4 	.word	0x200002d4
 80054a4:	20000210 	.word	0x20000210
 80054a8:	200002e0 	.word	0x200002e0
 80054ac:	200002f0 	.word	0x200002f0
 80054b0:	200002dc 	.word	0x200002dc
 80054b4:	20000214 	.word	0x20000214
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80054c2:	4b20      	ldr	r3, [pc, #128]	@ (8005544 <vTaskStartScheduler+0x88>)
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	2264      	movs	r2, #100	@ 0x64
 80054ce:	491e      	ldr	r1, [pc, #120]	@ (8005548 <vTaskStartScheduler+0x8c>)
 80054d0:	481e      	ldr	r0, [pc, #120]	@ (800554c <vTaskStartScheduler+0x90>)
 80054d2:	f7ff fe87 	bl	80051e4 <xTaskCreate>
 80054d6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d102      	bne.n	80054e4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80054de:	f001 f979 	bl	80067d4 <xTimerCreateTimerTask>
 80054e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d116      	bne.n	8005518 <vTaskStartScheduler+0x5c>
        __asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	60bb      	str	r3, [r7, #8]
    }
 80054fc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <vTaskStartScheduler+0x94>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005506:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <vTaskStartScheduler+0x98>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800550c:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <vTaskStartScheduler+0x9c>)
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005512:	f001 fd3f 	bl	8006f94 <xPortStartScheduler>
 8005516:	e00f      	b.n	8005538 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d10b      	bne.n	8005538 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	607b      	str	r3, [r7, #4]
    }
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005538:	4b08      	ldr	r3, [pc, #32]	@ (800555c <vTaskStartScheduler+0xa0>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	200002f8 	.word	0x200002f8
 8005548:	080084f0 	.word	0x080084f0
 800554c:	08005e31 	.word	0x08005e31
 8005550:	200002f4 	.word	0x200002f4
 8005554:	200002e0 	.word	0x200002e0
 8005558:	200002d8 	.word	0x200002d8
 800555c:	20000028 	.word	0x20000028

08005560 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <vTaskSuspendAll+0x18>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	4a03      	ldr	r2, [pc, #12]	@ (8005578 <vTaskSuspendAll+0x18>)
 800556c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	200002fc 	.word	0x200002fc

0800557c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800558a:	4b71      	ldr	r3, [pc, #452]	@ (8005750 <xTaskResumeAll+0x1d4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <xTaskResumeAll+0x2e>
        __asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	607b      	str	r3, [r7, #4]
    }
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80055aa:	f001 fd97 	bl	80070dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80055ae:	4b68      	ldr	r3, [pc, #416]	@ (8005750 <xTaskResumeAll+0x1d4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	4a66      	ldr	r2, [pc, #408]	@ (8005750 <xTaskResumeAll+0x1d4>)
 80055b6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b8:	4b65      	ldr	r3, [pc, #404]	@ (8005750 <xTaskResumeAll+0x1d4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 80c0 	bne.w	8005742 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055c2:	4b64      	ldr	r3, [pc, #400]	@ (8005754 <xTaskResumeAll+0x1d8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80bb 	beq.w	8005742 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055cc:	e08a      	b.n	80056e4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ce:	4b62      	ldr	r3, [pc, #392]	@ (8005758 <xTaskResumeAll+0x1dc>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	6a12      	ldr	r2, [r2, #32]
 80055e4:	609a      	str	r2, [r3, #8]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	69d2      	ldr	r2, [r2, #28]
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3318      	adds	r3, #24
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d103      	bne.n	8005604 <xTaskResumeAll+0x88>
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	6a1a      	ldr	r2, [r3, #32]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	605a      	str	r2, [r3, #4]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2200      	movs	r2, #0
 8005608:	629a      	str	r2, [r3, #40]	@ 0x28
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	1e5a      	subs	r2, r3, #1
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	68d2      	ldr	r2, [r2, #12]
 8005622:	609a      	str	r2, [r3, #8]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	6892      	ldr	r2, [r2, #8]
 800562c:	605a      	str	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3304      	adds	r3, #4
 8005636:	429a      	cmp	r2, r3
 8005638:	d103      	bne.n	8005642 <xTaskResumeAll+0xc6>
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2200      	movs	r2, #0
 8005646:	615a      	str	r2, [r3, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	1e5a      	subs	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	2201      	movs	r2, #1
 8005658:	409a      	lsls	r2, r3
 800565a:	4b40      	ldr	r3, [pc, #256]	@ (800575c <xTaskResumeAll+0x1e0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4313      	orrs	r3, r2
 8005660:	4a3e      	ldr	r2, [pc, #248]	@ (800575c <xTaskResumeAll+0x1e0>)
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005668:	493d      	ldr	r1, [pc, #244]	@ (8005760 <xTaskResumeAll+0x1e4>)
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3304      	adds	r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	3204      	adds	r2, #4
 8005690:	605a      	str	r2, [r3, #4]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005760 <xTaskResumeAll+0x1e4>)
 80056a8:	441a      	add	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b2:	492b      	ldr	r1, [pc, #172]	@ (8005760 <xTaskResumeAll+0x1e4>)
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	4827      	ldr	r0, [pc, #156]	@ (8005760 <xTaskResumeAll+0x1e4>)
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4403      	add	r3, r0
 80056ce:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d4:	4b23      	ldr	r3, [pc, #140]	@ (8005764 <xTaskResumeAll+0x1e8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80056de:	4b22      	ldr	r3, [pc, #136]	@ (8005768 <xTaskResumeAll+0x1ec>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005758 <xTaskResumeAll+0x1dc>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f47f af70 	bne.w	80055ce <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80056f4:	f000 fc32 	bl	8005f5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056f8:	4b1c      	ldr	r3, [pc, #112]	@ (800576c <xTaskResumeAll+0x1f0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005704:	f000 f852 	bl	80057ac <xTaskIncrementTick>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800570e:	4b16      	ldr	r3, [pc, #88]	@ (8005768 <xTaskResumeAll+0x1ec>)
 8005710:	2201      	movs	r2, #1
 8005712:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	3b01      	subs	r3, #1
 8005718:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f1      	bne.n	8005704 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8005720:	4b12      	ldr	r3, [pc, #72]	@ (800576c <xTaskResumeAll+0x1f0>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005726:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <xTaskResumeAll+0x1ec>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005732:	4b0f      	ldr	r3, [pc, #60]	@ (8005770 <xTaskResumeAll+0x1f4>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005742:	f001 fcfd 	bl	8007140 <vPortExitCritical>

    return xAlreadyYielded;
 8005746:	69bb      	ldr	r3, [r7, #24]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3720      	adds	r7, #32
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200002fc 	.word	0x200002fc
 8005754:	200002d4 	.word	0x200002d4
 8005758:	20000294 	.word	0x20000294
 800575c:	200002dc 	.word	0x200002dc
 8005760:	20000214 	.word	0x20000214
 8005764:	20000210 	.word	0x20000210
 8005768:	200002e8 	.word	0x200002e8
 800576c:	200002e4 	.word	0x200002e4
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <xTaskGetTickCount+0x1c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005780:	687b      	ldr	r3, [r7, #4]
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	200002d8 	.word	0x200002d8

08005794 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005798:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <uxTaskGetNumberOfTasks+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	200002d4 	.word	0x200002d4

080057ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	@ 0x28
 80057b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b6:	4b7e      	ldr	r3, [pc, #504]	@ (80059b0 <xTaskIncrementTick+0x204>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 80ed 	bne.w	800599a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057c0:	4b7c      	ldr	r3, [pc, #496]	@ (80059b4 <xTaskIncrementTick+0x208>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80057c8:	4a7a      	ldr	r2, [pc, #488]	@ (80059b4 <xTaskIncrementTick+0x208>)
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d121      	bne.n	8005818 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80057d4:	4b78      	ldr	r3, [pc, #480]	@ (80059b8 <xTaskIncrementTick+0x20c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <xTaskIncrementTick+0x4a>
        __asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
    }
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <xTaskIncrementTick+0x46>
 80057f6:	4b70      	ldr	r3, [pc, #448]	@ (80059b8 <xTaskIncrementTick+0x20c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	4b6f      	ldr	r3, [pc, #444]	@ (80059bc <xTaskIncrementTick+0x210>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6d      	ldr	r2, [pc, #436]	@ (80059b8 <xTaskIncrementTick+0x20c>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4a6d      	ldr	r2, [pc, #436]	@ (80059bc <xTaskIncrementTick+0x210>)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b6d      	ldr	r3, [pc, #436]	@ (80059c0 <xTaskIncrementTick+0x214>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	4a6b      	ldr	r2, [pc, #428]	@ (80059c0 <xTaskIncrementTick+0x214>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	f000 fba2 	bl	8005f5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005818:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <xTaskIncrementTick+0x218>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	429a      	cmp	r2, r3
 8005820:	f0c0 80a6 	bcc.w	8005970 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005824:	4b64      	ldr	r3, [pc, #400]	@ (80059b8 <xTaskIncrementTick+0x20c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582e:	4b65      	ldr	r3, [pc, #404]	@ (80059c4 <xTaskIncrementTick+0x218>)
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	601a      	str	r2, [r3, #0]
                    break;
 8005836:	e09b      	b.n	8005970 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005838:	4b5f      	ldr	r3, [pc, #380]	@ (80059b8 <xTaskIncrementTick+0x20c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	429a      	cmp	r2, r3
 800584e:	d203      	bcs.n	8005858 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005850:	4a5c      	ldr	r2, [pc, #368]	@ (80059c4 <xTaskIncrementTick+0x218>)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005856:	e08b      	b.n	8005970 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	68d2      	ldr	r2, [r2, #12]
 8005866:	609a      	str	r2, [r3, #8]
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	6892      	ldr	r2, [r2, #8]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3304      	adds	r3, #4
 800587a:	429a      	cmp	r2, r3
 800587c:	d103      	bne.n	8005886 <xTaskIncrementTick+0xda>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1e5a      	subs	r2, r3, #1
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01e      	beq.n	80058dc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	6a12      	ldr	r2, [r2, #32]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	69d2      	ldr	r2, [r2, #28]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3318      	adds	r3, #24
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d103      	bne.n	80058cc <xTaskIncrementTick+0x120>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2200      	movs	r2, #0
 80058d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	4b38      	ldr	r3, [pc, #224]	@ (80059c8 <xTaskIncrementTick+0x21c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	4a37      	ldr	r2, [pc, #220]	@ (80059c8 <xTaskIncrementTick+0x21c>)
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f2:	4936      	ldr	r1, [pc, #216]	@ (80059cc <xTaskIncrementTick+0x220>)
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	3304      	adds	r3, #4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	3204      	adds	r2, #4
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1d1a      	adds	r2, r3, #4
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4a26      	ldr	r2, [pc, #152]	@ (80059cc <xTaskIncrementTick+0x220>)
 8005932:	441a      	add	r2, r3
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	615a      	str	r2, [r3, #20]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593c:	4923      	ldr	r1, [pc, #140]	@ (80059cc <xTaskIncrementTick+0x220>)
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	481f      	ldr	r0, [pc, #124]	@ (80059cc <xTaskIncrementTick+0x220>)
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4403      	add	r3, r0
 8005958:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4b1c      	ldr	r3, [pc, #112]	@ (80059d0 <xTaskIncrementTick+0x224>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	f67f af5d 	bls.w	8005824 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596e:	e759      	b.n	8005824 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005970:	4b17      	ldr	r3, [pc, #92]	@ (80059d0 <xTaskIncrementTick+0x224>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005976:	4915      	ldr	r1, [pc, #84]	@ (80059cc <xTaskIncrementTick+0x220>)
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d901      	bls.n	800598c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800598c:	4b11      	ldr	r3, [pc, #68]	@ (80059d4 <xTaskIncrementTick+0x228>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
 8005998:	e004      	b.n	80059a4 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800599a:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <xTaskIncrementTick+0x22c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	4a0d      	ldr	r2, [pc, #52]	@ (80059d8 <xTaskIncrementTick+0x22c>)
 80059a2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3728      	adds	r7, #40	@ 0x28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200002fc 	.word	0x200002fc
 80059b4:	200002d8 	.word	0x200002d8
 80059b8:	2000028c 	.word	0x2000028c
 80059bc:	20000290 	.word	0x20000290
 80059c0:	200002ec 	.word	0x200002ec
 80059c4:	200002f4 	.word	0x200002f4
 80059c8:	200002dc 	.word	0x200002dc
 80059cc:	20000214 	.word	0x20000214
 80059d0:	20000210 	.word	0x20000210
 80059d4:	200002e8 	.word	0x200002e8
 80059d8:	200002e4 	.word	0x200002e4

080059dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059e2:	4b27      	ldr	r3, [pc, #156]	@ (8005a80 <vTaskSwitchContext+0xa4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80059ea:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <vTaskSwitchContext+0xa8>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80059f0:	e040      	b.n	8005a74 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80059f2:	4b24      	ldr	r3, [pc, #144]	@ (8005a84 <vTaskSwitchContext+0xa8>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f8:	4b23      	ldr	r3, [pc, #140]	@ (8005a88 <vTaskSwitchContext+0xac>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	fab3 f383 	clz	r3, r3
 8005a04:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005a06:	7afb      	ldrb	r3, [r7, #11]
 8005a08:	f1c3 031f 	rsb	r3, r3, #31
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	491f      	ldr	r1, [pc, #124]	@ (8005a8c <vTaskSwitchContext+0xb0>)
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <vTaskSwitchContext+0x5e>
        __asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
    }
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	e7fd      	b.n	8005a36 <vTaskSwitchContext+0x5a>
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4a11      	ldr	r2, [pc, #68]	@ (8005a8c <vTaskSwitchContext+0xb0>)
 8005a46:	4413      	add	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d104      	bne.n	8005a6a <vTaskSwitchContext+0x8e>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a07      	ldr	r2, [pc, #28]	@ (8005a90 <vTaskSwitchContext+0xb4>)
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	200002fc 	.word	0x200002fc
 8005a84:	200002e8 	.word	0x200002e8
 8005a88:	200002dc 	.word	0x200002dc
 8005a8c:	20000214 	.word	0x20000214
 8005a90:	20000210 	.word	0x20000210

08005a94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
    }
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005abc:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <vTaskPlaceOnEventList+0x48>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fe fdb2 	bl	800462e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005aca:	2101      	movs	r1, #1
 8005acc:	6838      	ldr	r0, [r7, #0]
 8005ace:	f000 fe01 	bl	80066d4 <prvAddCurrentTaskToDelayedList>
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000210 	.word	0x20000210

08005ae0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	613b      	str	r3, [r7, #16]
    }
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	e7fd      	b.n	8005b06 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	61da      	str	r2, [r3, #28]
 8005b18:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	6892      	ldr	r2, [r2, #8]
 8005b20:	621a      	str	r2, [r3, #32]
 8005b22:	4b11      	ldr	r3, [pc, #68]	@ (8005b68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	3218      	adds	r2, #24
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f103 0218 	add.w	r2, r3, #24
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	609a      	str	r2, [r3, #8]
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	68b8      	ldr	r0, [r7, #8]
 8005b5c:	f000 fdba 	bl	80066d4 <prvAddCurrentTaskToDelayedList>
    }
 8005b60:	bf00      	nop
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000210 	.word	0x20000210

08005b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b08b      	sub	sp, #44	@ 0x2c
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	60fb      	str	r3, [r7, #12]
    }
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	6a12      	ldr	r2, [r2, #32]
 8005ba8:	609a      	str	r2, [r3, #8]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	69d2      	ldr	r2, [r2, #28]
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	3318      	adds	r3, #24
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d103      	bne.n	8005bc8 <xTaskRemoveFromEventList+0x5c>
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8005d04 <xTaskRemoveFromEventList+0x198>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d15e      	bne.n	8005c9e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	68d2      	ldr	r2, [r2, #12]
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	6892      	ldr	r2, [r2, #8]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	3304      	adds	r3, #4
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d103      	bne.n	8005c0e <xTaskRemoveFromEventList+0xa2>
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2200      	movs	r2, #0
 8005c12:	615a      	str	r2, [r3, #20]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	2201      	movs	r2, #1
 8005c24:	409a      	lsls	r2, r3
 8005c26:	4b38      	ldr	r3, [pc, #224]	@ (8005d08 <xTaskRemoveFromEventList+0x19c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	4a36      	ldr	r2, [pc, #216]	@ (8005d08 <xTaskRemoveFromEventList+0x19c>)
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c34:	4935      	ldr	r1, [pc, #212]	@ (8005d0c <xTaskRemoveFromEventList+0x1a0>)
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	3304      	adds	r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	60da      	str	r2, [r3, #12]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	6a3a      	ldr	r2, [r7, #32]
 8005c5a:	3204      	adds	r2, #4
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	1d1a      	adds	r2, r3, #4
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4a26      	ldr	r2, [pc, #152]	@ (8005d0c <xTaskRemoveFromEventList+0x1a0>)
 8005c74:	441a      	add	r2, r3
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	615a      	str	r2, [r3, #20]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7e:	4923      	ldr	r1, [pc, #140]	@ (8005d0c <xTaskRemoveFromEventList+0x1a0>)
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	1c59      	adds	r1, r3, #1
 8005c8e:	481f      	ldr	r0, [pc, #124]	@ (8005d0c <xTaskRemoveFromEventList+0x1a0>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4403      	add	r3, r0
 8005c9a:	6019      	str	r1, [r3, #0]
 8005c9c:	e01b      	b.n	8005cd6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d10 <xTaskRemoveFromEventList+0x1a4>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	61da      	str	r2, [r3, #28]
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	621a      	str	r2, [r3, #32]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	3218      	adds	r2, #24
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f103 0218 	add.w	r2, r3, #24
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	609a      	str	r2, [r3, #8]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	4a11      	ldr	r2, [pc, #68]	@ (8005d10 <xTaskRemoveFromEventList+0x1a4>)
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ccc:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <xTaskRemoveFromEventList+0x1a4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8005d10 <xTaskRemoveFromEventList+0x1a4>)
 8005cd4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <xTaskRemoveFromEventList+0x1a8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d905      	bls.n	8005cf0 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <xTaskRemoveFromEventList+0x1ac>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e001      	b.n	8005cf4 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	372c      	adds	r7, #44	@ 0x2c
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	200002fc 	.word	0x200002fc
 8005d08:	200002dc 	.word	0x200002dc
 8005d0c:	20000214 	.word	0x20000214
 8005d10:	20000294 	.word	0x20000294
 8005d14:	20000210 	.word	0x20000210
 8005d18:	200002e8 	.word	0x200002e8

08005d1c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d24:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <vTaskInternalSetTimeOutState+0x24>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <vTaskInternalSetTimeOutState+0x28>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	605a      	str	r2, [r3, #4]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	200002ec 	.word	0x200002ec
 8005d44:	200002d8 	.word	0x200002d8

08005d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	613b      	str	r3, [r7, #16]
    }
 8005d6a:	bf00      	nop
 8005d6c:	bf00      	nop
 8005d6e:	e7fd      	b.n	8005d6c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60fb      	str	r3, [r7, #12]
    }
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8005d8e:	f001 f9a5 	bl	80070dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005d92:	4b1f      	ldr	r3, [pc, #124]	@ (8005e10 <xTaskCheckForTimeOut+0xc8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d102      	bne.n	8005db2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e026      	b.n	8005e00 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b17      	ldr	r3, [pc, #92]	@ (8005e14 <xTaskCheckForTimeOut+0xcc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d00a      	beq.n	8005dd4 <xTaskCheckForTimeOut+0x8c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d305      	bcc.n	8005dd4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e015      	b.n	8005e00 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d20b      	bcs.n	8005df6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	1ad2      	subs	r2, r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff ff96 	bl	8005d1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e004      	b.n	8005e00 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e00:	f001 f99e 	bl	8007140 <vPortExitCritical>

    return xReturn;
 8005e04:	69fb      	ldr	r3, [r7, #28]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200002d8 	.word	0x200002d8
 8005e14:	200002ec 	.word	0x200002ec

08005e18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e1c:	4b03      	ldr	r3, [pc, #12]	@ (8005e2c <vTaskMissedYield+0x14>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	200002e8 	.word	0x200002e8

08005e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e38:	f000 f852 	bl	8005ee0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e3c:	4b06      	ldr	r3, [pc, #24]	@ (8005e58 <prvIdleTask+0x28>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d9f9      	bls.n	8005e38 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005e44:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <prvIdleTask+0x2c>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e54:	e7f0      	b.n	8005e38 <prvIdleTask+0x8>
 8005e56:	bf00      	nop
 8005e58:	20000214 	.word	0x20000214
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e00c      	b.n	8005e86 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a12      	ldr	r2, [pc, #72]	@ (8005ec0 <prvInitialiseTaskLists+0x60>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fb86 	bl	800458c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d9ef      	bls.n	8005e6c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005e8c:	480d      	ldr	r0, [pc, #52]	@ (8005ec4 <prvInitialiseTaskLists+0x64>)
 8005e8e:	f7fe fb7d 	bl	800458c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005e92:	480d      	ldr	r0, [pc, #52]	@ (8005ec8 <prvInitialiseTaskLists+0x68>)
 8005e94:	f7fe fb7a 	bl	800458c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005e98:	480c      	ldr	r0, [pc, #48]	@ (8005ecc <prvInitialiseTaskLists+0x6c>)
 8005e9a:	f7fe fb77 	bl	800458c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005e9e:	480c      	ldr	r0, [pc, #48]	@ (8005ed0 <prvInitialiseTaskLists+0x70>)
 8005ea0:	f7fe fb74 	bl	800458c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005ea4:	480b      	ldr	r0, [pc, #44]	@ (8005ed4 <prvInitialiseTaskLists+0x74>)
 8005ea6:	f7fe fb71 	bl	800458c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <prvInitialiseTaskLists+0x78>)
 8005eac:	4a05      	ldr	r2, [pc, #20]	@ (8005ec4 <prvInitialiseTaskLists+0x64>)
 8005eae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <prvInitialiseTaskLists+0x7c>)
 8005eb2:	4a05      	ldr	r2, [pc, #20]	@ (8005ec8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000214 	.word	0x20000214
 8005ec4:	20000264 	.word	0x20000264
 8005ec8:	20000278 	.word	0x20000278
 8005ecc:	20000294 	.word	0x20000294
 8005ed0:	200002a8 	.word	0x200002a8
 8005ed4:	200002c0 	.word	0x200002c0
 8005ed8:	2000028c 	.word	0x2000028c
 8005edc:	20000290 	.word	0x20000290

08005ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ee6:	e019      	b.n	8005f1c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005ee8:	f001 f8f8 	bl	80070dc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <prvCheckTasksWaitingTermination+0x50>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fbd1 	bl	80046a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <prvCheckTasksWaitingTermination+0x54>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	4a0b      	ldr	r2, [pc, #44]	@ (8005f34 <prvCheckTasksWaitingTermination+0x54>)
 8005f06:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	@ (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f10:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005f12:	f001 f915 	bl	8007140 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f810 	bl	8005f3c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f1c:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e1      	bne.n	8005ee8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200002a8 	.word	0x200002a8
 8005f34:	200002d4 	.word	0x200002d4
 8005f38:	200002bc 	.word	0x200002bc

08005f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 faad 	bl	80074a8 <vPortFree>
            vPortFree( pxTCB );
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 faaa 	bl	80074a8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <prvResetNextTaskUnblockTime+0x30>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f6a:	4b09      	ldr	r3, [pc, #36]	@ (8005f90 <prvResetNextTaskUnblockTime+0x34>)
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f72:	e005      	b.n	8005f80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <prvResetNextTaskUnblockTime+0x30>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	@ (8005f90 <prvResetNextTaskUnblockTime+0x34>)
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000028c 	.word	0x2000028c
 8005f90:	200002f4 	.word	0x200002f4

08005f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <xTaskGetSchedulerState+0x34>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	e008      	b.n	8005fba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa8:	4b08      	ldr	r3, [pc, #32]	@ (8005fcc <xTaskGetSchedulerState+0x38>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	e001      	b.n	8005fba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fba:	687b      	ldr	r3, [r7, #4]
    }
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	200002e0 	.word	0x200002e0
 8005fcc:	200002fc 	.word	0x200002fc

08005fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d065      	beq.n	80060b2 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005fe6:	4b35      	ldr	r3, [pc, #212]	@ (80060bc <xTaskPriorityDisinherit+0xec>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d00b      	beq.n	8006008 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	60fb      	str	r3, [r7, #12]
    }
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	e7fd      	b.n	8006004 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60bb      	str	r3, [r7, #8]
    }
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602c:	1e5a      	subs	r2, r3, #1
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	429a      	cmp	r2, r3
 800603c:	d039      	beq.n	80060b2 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d135      	bne.n	80060b2 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fb28 	bl	80046a0 <uxListRemove>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	43da      	mvns	r2, r3
 8006062:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <xTaskPriorityDisinherit+0xf0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4013      	ands	r3, r2
 8006068:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <xTaskPriorityDisinherit+0xf0>)
 800606a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	f1c3 0204 	rsb	r2, r3, #4
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	2201      	movs	r2, #1
 8006086:	409a      	lsls	r2, r3
 8006088:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <xTaskPriorityDisinherit+0xf0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4313      	orrs	r3, r2
 800608e:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <xTaskPriorityDisinherit+0xf0>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a09      	ldr	r2, [pc, #36]	@ (80060c4 <xTaskPriorityDisinherit+0xf4>)
 80060a0:	441a      	add	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe fa9c 	bl	80045e6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060b2:	697b      	ldr	r3, [r7, #20]
    }
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000210 	.word	0x20000210
 80060c0:	200002dc 	.word	0x200002dc
 80060c4:	20000214 	.word	0x20000214

080060c8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	613b      	str	r3, [r7, #16]
    }
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80060f4:	f000 fff2 	bl	80070dc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80060f8:	4b31      	ldr	r3, [pc, #196]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	3354      	adds	r3, #84	@ 0x54
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d022      	beq.n	8006150 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800610a:	4b2d      	ldr	r3, [pc, #180]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	3214      	adds	r2, #20
 8006112:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	43d2      	mvns	r2, r2
 800611a:	4011      	ands	r1, r2
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	3214      	adds	r2, #20
 8006120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006124:	4b26      	ldr	r3, [pc, #152]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	3354      	adds	r3, #84	@ 0x54
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006138:	2101      	movs	r1, #1
 800613a:	6a38      	ldr	r0, [r7, #32]
 800613c:	f000 faca 	bl	80066d4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006140:	4b20      	ldr	r3, [pc, #128]	@ (80061c4 <xTaskGenericNotifyWait+0xfc>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006150:	f000 fff6 	bl	8007140 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006154:	f000 ffc2 	bl	80070dc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800615e:	4b18      	ldr	r3, [pc, #96]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	3214      	adds	r2, #20
 8006166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800616e:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	3354      	adds	r3, #84	@ 0x54
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d002      	beq.n	8006186 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	e00e      	b.n	80061a4 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006186:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	3214      	adds	r2, #20
 800618e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	43d2      	mvns	r2, r2
 8006196:	4011      	ands	r1, r2
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	3214      	adds	r2, #20
 800619c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061a4:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <xTaskGenericNotifyWait+0xf8>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	3354      	adds	r3, #84	@ 0x54
 80061ae:	2200      	movs	r2, #0
 80061b0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80061b2:	f000 ffc5 	bl	8007140 <vPortExitCritical>

        return xReturn;
 80061b6:	697b      	ldr	r3, [r7, #20]
    }
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000210 	.word	0x20000210
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	@ 0x38
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80061d6:	2301      	movs	r3, #1
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <xTaskGenericNotify+0x30>
        __asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
    }
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <xTaskGenericNotify+0x4e>
        __asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	61fb      	str	r3, [r7, #28]
    }
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800621a:	f000 ff5f 	bl	80070dc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800621e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	3214      	adds	r2, #20
 800622a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800622e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006230:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4413      	add	r3, r2
 8006238:	3354      	adds	r3, #84	@ 0x54
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4413      	add	r3, r2
 8006246:	3354      	adds	r3, #84	@ 0x54
 8006248:	2202      	movs	r2, #2
 800624a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d83b      	bhi.n	80062ca <xTaskGenericNotify+0x102>
 8006252:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <xTaskGenericNotify+0x90>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	080062eb 	.word	0x080062eb
 800625c:	0800626d 	.word	0x0800626d
 8006260:	08006289 	.word	0x08006289
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062af 	.word	0x080062af
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	3214      	adds	r2, #20
 8006272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	ea42 0103 	orr.w	r1, r2, r3
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	3214      	adds	r2, #20
 8006282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006286:	e033      	b.n	80062f0 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	3214      	adds	r2, #20
 800628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006292:	1c59      	adds	r1, r3, #1
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	3214      	adds	r2, #20
 800629a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800629e:	e027      	b.n	80062f0 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	3214      	adds	r2, #20
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062ac:	e020      	b.n	80062f0 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d006      	beq.n	80062c4 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	3214      	adds	r2, #20
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80062c2:	e015      	b.n	80062f0 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80062c8:	e012      	b.n	80062f0 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80062ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006400 <xTaskGenericNotify+0x238>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <xTaskGenericNotify+0x126>
        __asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	61bb      	str	r3, [r7, #24]
    }
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xTaskGenericNotify+0x11e>
                    break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <xTaskGenericNotify+0x128>

                    break;
 80062ee:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d17c      	bne.n	80063f2 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006304:	68d2      	ldr	r2, [r2, #12]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630e:	6892      	ldr	r2, [r2, #8]
 8006310:	605a      	str	r2, [r3, #4]
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	3304      	adds	r3, #4
 800631a:	429a      	cmp	r2, r3
 800631c:	d103      	bne.n	8006326 <xTaskGenericNotify+0x15e>
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	2200      	movs	r2, #0
 800632a:	615a      	str	r2, [r3, #20]
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1e5a      	subs	r2, r3, #1
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	2201      	movs	r2, #1
 800633c:	409a      	lsls	r2, r3
 800633e:	4b31      	ldr	r3, [pc, #196]	@ (8006404 <xTaskGenericNotify+0x23c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	4a2f      	ldr	r2, [pc, #188]	@ (8006404 <xTaskGenericNotify+0x23c>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634c:	492e      	ldr	r1, [pc, #184]	@ (8006408 <xTaskGenericNotify+0x240>)
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3304      	adds	r3, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006362:	609a      	str	r2, [r3, #8]
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	60da      	str	r2, [r3, #12]
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006372:	3204      	adds	r2, #4
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	1d1a      	adds	r2, r3, #4
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	609a      	str	r2, [r3, #8]
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a1f      	ldr	r2, [pc, #124]	@ (8006408 <xTaskGenericNotify+0x240>)
 800638c:	441a      	add	r2, r3
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	615a      	str	r2, [r3, #20]
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006396:	491c      	ldr	r1, [pc, #112]	@ (8006408 <xTaskGenericNotify+0x240>)
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	4818      	ldr	r0, [pc, #96]	@ (8006408 <xTaskGenericNotify+0x240>)
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4403      	add	r3, r0
 80063b2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <xTaskGenericNotify+0x20c>
        __asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	617b      	str	r3, [r7, #20]
    }
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d8:	4b0c      	ldr	r3, [pc, #48]	@ (800640c <xTaskGenericNotify+0x244>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d907      	bls.n	80063f2 <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80063e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <xTaskGenericNotify+0x248>)
 80063e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80063f2:	f000 fea5 	bl	8007140 <vPortExitCritical>

        return xReturn;
 80063f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80063f8:	4618      	mov	r0, r3
 80063fa:	3738      	adds	r7, #56	@ 0x38
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200002d8 	.word	0x200002d8
 8006404:	200002dc 	.word	0x200002dc
 8006408:	20000214 	.word	0x20000214
 800640c:	20000210 	.word	0x20000210
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006414:	b580      	push	{r7, lr}
 8006416:	b092      	sub	sp, #72	@ 0x48
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006422:	2301      	movs	r3, #1
 8006424:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006462:	f000 ff23 	bl	80072ac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 800646a:	f3ef 8211 	mrs	r2, BASEPRI
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	623a      	str	r2, [r7, #32]
 8006480:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006482:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006488:	2b00      	cmp	r3, #0
 800648a:	d006      	beq.n	800649a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800648c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	3214      	adds	r2, #20
 8006492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006498:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800649a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4413      	add	r3, r2
 80064a0:	3354      	adds	r3, #84	@ 0x54
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80064a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	3354      	adds	r3, #84	@ 0x54
 80064b0:	2202      	movs	r2, #2
 80064b2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d83b      	bhi.n	8006532 <xTaskGenericNotifyFromISR+0x11e>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <xTaskGenericNotifyFromISR+0xac>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	08006553 	.word	0x08006553
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	08006509 	.word	0x08006509
 80064d0:	08006517 	.word	0x08006517
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80064d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	3214      	adds	r2, #20
 80064da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	ea42 0103 	orr.w	r1, r2, r3
 80064e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	3214      	adds	r2, #20
 80064ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064ee:	e033      	b.n	8006558 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80064f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	3214      	adds	r2, #20
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	3214      	adds	r2, #20
 8006502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006506:	e027      	b.n	8006558 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	3214      	adds	r2, #20
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006514:	e020      	b.n	8006558 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006516:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800651a:	2b02      	cmp	r3, #2
 800651c:	d006      	beq.n	800652c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800651e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	3214      	adds	r2, #20
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800652a:	e015      	b.n	8006558 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800652c:	2300      	movs	r3, #0
 800652e:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8006530:	e012      	b.n	8006558 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006532:	4b61      	ldr	r3, [pc, #388]	@ (80066b8 <xTaskGenericNotifyFromISR+0x2a4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	61bb      	str	r3, [r7, #24]
    }
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006556:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006558:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800655c:	2b01      	cmp	r3, #1
 800655e:	f040 809f 	bne.w	80066a0 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	617b      	str	r3, [r7, #20]
    }
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006582:	4b4e      	ldr	r3, [pc, #312]	@ (80066bc <xTaskGenericNotifyFromISR+0x2a8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d15e      	bne.n	8006648 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800658a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006596:	68d2      	ldr	r2, [r2, #12]
 8006598:	609a      	str	r2, [r3, #8]
 800659a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065a0:	6892      	ldr	r2, [r2, #8]
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065aa:	3304      	adds	r3, #4
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d103      	bne.n	80065b8 <xTaskGenericNotifyFromISR+0x1a4>
 80065b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	605a      	str	r2, [r3, #4]
 80065b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ba:	2200      	movs	r2, #0
 80065bc:	615a      	str	r2, [r3, #20]
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1e5a      	subs	r2, r3, #1
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80065c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	2201      	movs	r2, #1
 80065ce:	409a      	lsls	r2, r3
 80065d0:	4b3b      	ldr	r3, [pc, #236]	@ (80066c0 <xTaskGenericNotifyFromISR+0x2ac>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	4a3a      	ldr	r2, [pc, #232]	@ (80066c0 <xTaskGenericNotifyFromISR+0x2ac>)
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065de:	4939      	ldr	r1, [pc, #228]	@ (80066c4 <xTaskGenericNotifyFromISR+0x2b0>)
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	3304      	adds	r3, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065f4:	609a      	str	r2, [r3, #8]
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065fc:	60da      	str	r2, [r3, #12]
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006604:	3204      	adds	r2, #4
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660a:	1d1a      	adds	r2, r3, #4
 800660c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660e:	609a      	str	r2, [r3, #8]
 8006610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a29      	ldr	r2, [pc, #164]	@ (80066c4 <xTaskGenericNotifyFromISR+0x2b0>)
 800661e:	441a      	add	r2, r3
 8006620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006622:	615a      	str	r2, [r3, #20]
 8006624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006628:	4926      	ldr	r1, [pc, #152]	@ (80066c4 <xTaskGenericNotifyFromISR+0x2b0>)
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	4822      	ldr	r0, [pc, #136]	@ (80066c4 <xTaskGenericNotifyFromISR+0x2b0>)
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4403      	add	r3, r0
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	e01b      	b.n	8006680 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006648:	4b1f      	ldr	r3, [pc, #124]	@ (80066c8 <xTaskGenericNotifyFromISR+0x2b4>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
 800664e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006652:	61da      	str	r2, [r3, #28]
 8006654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665a:	621a      	str	r2, [r3, #32]
 800665c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006662:	3218      	adds	r2, #24
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006668:	f103 0218 	add.w	r2, r3, #24
 800666c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006672:	4a15      	ldr	r2, [pc, #84]	@ (80066c8 <xTaskGenericNotifyFromISR+0x2b4>)
 8006674:	629a      	str	r2, [r3, #40]	@ 0x28
 8006676:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <xTaskGenericNotifyFromISR+0x2b4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	4a12      	ldr	r2, [pc, #72]	@ (80066c8 <xTaskGenericNotifyFromISR+0x2b4>)
 800667e:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <xTaskGenericNotifyFromISR+0x2b8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	429a      	cmp	r2, r3
 800668c:	d908      	bls.n	80066a0 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800668e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800669a:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <xTaskGenericNotifyFromISR+0x2bc>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a2:	613b      	str	r3, [r7, #16]
        __asm volatile
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f383 8811 	msr	BASEPRI, r3
    }
 80066aa:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80066ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80066ae:	4618      	mov	r0, r3
 80066b0:	3748      	adds	r7, #72	@ 0x48
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200002d8 	.word	0x200002d8
 80066bc:	200002fc 	.word	0x200002fc
 80066c0:	200002dc 	.word	0x200002dc
 80066c4:	20000214 	.word	0x20000214
 80066c8:	20000294 	.word	0x20000294
 80066cc:	20000210 	.word	0x20000210
 80066d0:	200002e8 	.word	0x200002e8

080066d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80066de:	4b36      	ldr	r3, [pc, #216]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e4:	4b35      	ldr	r3, [pc, #212]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd ffd8 	bl	80046a0 <uxListRemove>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10b      	bne.n	800670e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066f6:	4b31      	ldr	r3, [pc, #196]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	2201      	movs	r2, #1
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43da      	mvns	r2, r3
 8006704:	4b2e      	ldr	r3, [pc, #184]	@ (80067c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4013      	ands	r3, r2
 800670a:	4a2d      	ldr	r2, [pc, #180]	@ (80067c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800670c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d124      	bne.n	8006760 <prvAddCurrentTaskToDelayedList+0x8c>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d021      	beq.n	8006760 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800671c:	4b29      	ldr	r3, [pc, #164]	@ (80067c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	4b26      	ldr	r3, [pc, #152]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	609a      	str	r2, [r3, #8]
 800672a:	4b24      	ldr	r3, [pc, #144]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	6892      	ldr	r2, [r2, #8]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	4b21      	ldr	r3, [pc, #132]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	3204      	adds	r2, #4
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	4b1e      	ldr	r3, [pc, #120]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	1d1a      	adds	r2, r3, #4
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	609a      	str	r2, [r3, #8]
 800674a:	4b1c      	ldr	r3, [pc, #112]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1d      	ldr	r2, [pc, #116]	@ (80067c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006750:	615a      	str	r2, [r3, #20]
 8006752:	4b1c      	ldr	r3, [pc, #112]	@ (80067c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3301      	adds	r3, #1
 8006758:	4a1a      	ldr	r2, [pc, #104]	@ (80067c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800675e:	e026      	b.n	80067ae <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006768:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	429a      	cmp	r2, r3
 8006776:	d209      	bcs.n	800678c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006778:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b0f      	ldr	r3, [pc, #60]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3304      	adds	r3, #4
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f7fd ff52 	bl	800462e <vListInsert>
}
 800678a:	e010      	b.n	80067ae <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678c:	4b0f      	ldr	r3, [pc, #60]	@ (80067cc <prvAddCurrentTaskToDelayedList+0xf8>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3304      	adds	r3, #4
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f7fd ff48 	bl	800462e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800679e:	4b0c      	ldr	r3, [pc, #48]	@ (80067d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d202      	bcs.n	80067ae <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80067a8:	4a09      	ldr	r2, [pc, #36]	@ (80067d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6013      	str	r3, [r2, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200002d8 	.word	0x200002d8
 80067bc:	20000210 	.word	0x20000210
 80067c0:	200002dc 	.word	0x200002dc
 80067c4:	200002c0 	.word	0x200002c0
 80067c8:	20000290 	.word	0x20000290
 80067cc:	2000028c 	.word	0x2000028c
 80067d0:	200002f4 	.word	0x200002f4

080067d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80067de:	f000 faf5 	bl	8006dcc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80067e2:	4b11      	ldr	r3, [pc, #68]	@ (8006828 <xTimerCreateTimerTask+0x54>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80067ea:	4b10      	ldr	r3, [pc, #64]	@ (800682c <xTimerCreateTimerTask+0x58>)
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	2302      	movs	r3, #2
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	22c8      	movs	r2, #200	@ 0xc8
 80067f6:	490e      	ldr	r1, [pc, #56]	@ (8006830 <xTimerCreateTimerTask+0x5c>)
 80067f8:	480e      	ldr	r0, [pc, #56]	@ (8006834 <xTimerCreateTimerTask+0x60>)
 80067fa:	f7fe fcf3 	bl	80051e4 <xTaskCreate>
 80067fe:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	603b      	str	r3, [r7, #0]
    }
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <xTimerCreateTimerTask+0x46>
        return xReturn;
 800681e:	687b      	ldr	r3, [r7, #4]
    }
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000330 	.word	0x20000330
 800682c:	20000334 	.word	0x20000334
 8006830:	080084f8 	.word	0x080084f8
 8006834:	08006a2d 	.word	0x08006a2d

08006838 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af02      	add	r7, sp, #8
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006846:	202c      	movs	r0, #44	@ 0x2c
 8006848:	f000 fd72 	bl	8007330 <pvPortMalloc>
 800684c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f805 	bl	800687a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006870:	697b      	ldr	r3, [r7, #20]
        }
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
    }
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80068a6:	f000 fa91 	bl	8006dcc <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fe80 	bl	80045cc <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068d8:	f043 0304 	orr.w	r3, r3, #4
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80068e4:	bf00      	nop
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	@ 0x28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <xTimerGenericCommand+0x30>
        __asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	623b      	str	r3, [r7, #32]
    }
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	e7fd      	b.n	8006918 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800691c:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <xTimerGenericCommand+0x98>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02a      	beq.n	800697a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b05      	cmp	r3, #5
 8006934:	dc18      	bgt.n	8006968 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006936:	f7ff fb2d 	bl	8005f94 <xTaskGetSchedulerState>
 800693a:	4603      	mov	r3, r0
 800693c:	2b02      	cmp	r3, #2
 800693e:	d109      	bne.n	8006954 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006940:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <xTimerGenericCommand+0x98>)
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	f107 0114 	add.w	r1, r7, #20
 8006948:	2300      	movs	r3, #0
 800694a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800694c:	f7fd ffd6 	bl	80048fc <xQueueGenericSend>
 8006950:	6278      	str	r0, [r7, #36]	@ 0x24
 8006952:	e012      	b.n	800697a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006954:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <xTimerGenericCommand+0x98>)
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	f107 0114 	add.w	r1, r7, #20
 800695c:	2300      	movs	r3, #0
 800695e:	2200      	movs	r2, #0
 8006960:	f7fd ffcc 	bl	80048fc <xQueueGenericSend>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24
 8006966:	e008      	b.n	800697a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006968:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <xTimerGenericCommand+0x98>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	f107 0114 	add.w	r1, r7, #20
 8006970:	2300      	movs	r3, #0
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	f7fe f8c4 	bl	8004b00 <xQueueGenericSendFromISR>
 8006978:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	@ 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000330 	.word	0x20000330

08006988 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006994:	e008      	b.n	80069a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4413      	add	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	18d1      	adds	r1, r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f8df 	bl	8006b78 <prvInsertTimerInActiveList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1ea      	bne.n	8006996 <prvReloadTimer+0xe>
        }
    }
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b14      	ldr	r3, [pc, #80]	@ (8006a28 <prvProcessExpiredTimer+0x5c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fd fe5b 	bl	80046a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ffc3 	bl	8006988 <prvReloadTimer>
 8006a02:	e008      	b.n	8006a16 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	4798      	blx	r3
    }
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000328 	.word	0x20000328

08006a2c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f859 	bl	8006af0 <prvGetNextExpireTime>
 8006a3e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f805 	bl	8006a54 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006a4a:	f000 f8d7 	bl	8006bfc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a4e:	bf00      	nop
 8006a50:	e7f0      	b.n	8006a34 <prvTimerTask+0x8>
	...

08006a54 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006a5e:	f7fe fd7f 	bl	8005560 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f866 	bl	8006b38 <prvSampleTimeNow>
 8006a6c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d130      	bne.n	8006ad6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <prvProcessTimerOrBlockTask+0x3c>
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d806      	bhi.n	8006a90 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006a82:	f7fe fd7b 	bl	800557c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff9f 	bl	80069cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006a8e:	e024      	b.n	8006ada <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a96:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <prvProcessTimerOrBlockTask+0x90>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <prvProcessTimerOrBlockTask+0x50>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <prvProcessTimerOrBlockTask+0x52>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae8 <prvProcessTimerOrBlockTask+0x94>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7fe fb61 	bl	800517c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006aba:	f7fe fd5f 	bl	800557c <xTaskResumeAll>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006ac4:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <prvProcessTimerOrBlockTask+0x98>)
 8006ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	f3bf 8f6f 	isb	sy
    }
 8006ad4:	e001      	b.n	8006ada <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006ad6:	f7fe fd51 	bl	800557c <xTaskResumeAll>
    }
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	2000032c 	.word	0x2000032c
 8006ae8:	20000330 	.word	0x20000330
 8006aec:	e000ed04 	.word	0xe000ed04

08006af0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006af8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b34 <prvGetNextExpireTime+0x44>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <prvGetNextExpireTime+0x16>
 8006b02:	2201      	movs	r2, #1
 8006b04:	e000      	b.n	8006b08 <prvGetNextExpireTime+0x18>
 8006b06:	2200      	movs	r2, #0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b14:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <prvGetNextExpireTime+0x44>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e001      	b.n	8006b24 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006b24:	68fb      	ldr	r3, [r7, #12]
    }
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000328 	.word	0x20000328

08006b38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006b40:	f7fe fe18 	bl	8005774 <xTaskGetTickCount>
 8006b44:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006b46:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <prvSampleTimeNow+0x3c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d205      	bcs.n	8006b5c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006b50:	f000 f916 	bl	8006d80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006b62:	4a04      	ldr	r2, [pc, #16]	@ (8006b74 <prvSampleTimeNow+0x3c>)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006b68:	68fb      	ldr	r3, [r7, #12]
    }
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000338 	.word	0x20000338

08006b78 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d812      	bhi.n	8006bc4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e01b      	b.n	8006bea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <prvInsertTimerInActiveList+0x7c>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fd fd36 	bl	800462e <vListInsert>
 8006bc2:	e012      	b.n	8006bea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d206      	bcs.n	8006bda <prvInsertTimerInActiveList+0x62>
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e007      	b.n	8006bea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bda:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <prvInsertTimerInActiveList+0x80>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fd fd22 	bl	800462e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006bea:	697b      	ldr	r3, [r7, #20]
    }
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	2000032c 	.word	0x2000032c
 8006bf8:	20000328 	.word	0x20000328

08006bfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c02:	e0a9      	b.n	8006d58 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f2c0 80a6 	blt.w	8006d58 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fd fd3f 	bl	80046a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff ff87 	bl	8006b38 <prvSampleTimeNow>
 8006c2a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	f200 808e 	bhi.w	8006d52 <prvProcessReceivedCommands+0x156>
 8006c36:	a201      	add	r2, pc, #4	@ (adr r2, 8006c3c <prvProcessReceivedCommands+0x40>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c61 	.word	0x08006c61
 8006c44:	08006cc9 	.word	0x08006cc9
 8006c48:	08006cdd 	.word	0x08006cdd
 8006c4c:	08006d29 	.word	0x08006d29
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c61 	.word	0x08006c61
 8006c58:	08006cc9 	.word	0x08006cc9
 8006c5c:	08006cdd 	.word	0x08006cdd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	18d1      	adds	r1, r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	69f8      	ldr	r0, [r7, #28]
 8006c80:	f7ff ff7a 	bl	8006b78 <prvInsertTimerInActiveList>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d065      	beq.n	8006d56 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	69f8      	ldr	r0, [r7, #28]
 8006ca6:	f7ff fe6f 	bl	8006988 <prvReloadTimer>
 8006caa:	e008      	b.n	8006cbe <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	69f8      	ldr	r0, [r7, #28]
 8006cc4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006cc6:	e046      	b.n	8006d56 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006cda:	e03d      	b.n	8006d58 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	617b      	str	r3, [r7, #20]
    }
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	18d1      	adds	r1, r2, r3
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	69f8      	ldr	r0, [r7, #28]
 8006d22:	f7ff ff29 	bl	8006b78 <prvInsertTimerInActiveList>
                        break;
 8006d26:	e017      	b.n	8006d58 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d103      	bne.n	8006d3e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8006d36:	69f8      	ldr	r0, [r7, #28]
 8006d38:	f000 fbb6 	bl	80074a8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006d3c:	e00c      	b.n	8006d58 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006d50:	e002      	b.n	8006d58 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <prvProcessReceivedCommands+0x15c>
                        break;
 8006d56:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d58:	4b08      	ldr	r3, [pc, #32]	@ (8006d7c <prvProcessReceivedCommands+0x180>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	2200      	movs	r2, #0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fd ff82 	bl	8004c6c <xQueueReceive>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f47f af4a 	bne.w	8006c04 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000330 	.word	0x20000330

08006d80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d86:	e009      	b.n	8006d9c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <prvSwitchTimerLists+0x44>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006d92:	f04f 31ff 	mov.w	r1, #4294967295
 8006d96:	6838      	ldr	r0, [r7, #0]
 8006d98:	f7ff fe18 	bl	80069cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d9c:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <prvSwitchTimerLists+0x44>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f0      	bne.n	8006d88 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006da6:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <prvSwitchTimerLists+0x44>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006dac:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <prvSwitchTimerLists+0x48>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a04      	ldr	r2, [pc, #16]	@ (8006dc4 <prvSwitchTimerLists+0x44>)
 8006db2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006db4:	4a04      	ldr	r2, [pc, #16]	@ (8006dc8 <prvSwitchTimerLists+0x48>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6013      	str	r3, [r2, #0]
    }
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000328 	.word	0x20000328
 8006dc8:	2000032c 	.word	0x2000032c

08006dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006dd0:	f000 f984 	bl	80070dc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006dd4:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d11d      	bne.n	8006e18 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006ddc:	4811      	ldr	r0, [pc, #68]	@ (8006e24 <prvCheckForValidListAndQueue+0x58>)
 8006dde:	f7fd fbd5 	bl	800458c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006de2:	4811      	ldr	r0, [pc, #68]	@ (8006e28 <prvCheckForValidListAndQueue+0x5c>)
 8006de4:	f7fd fbd2 	bl	800458c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006de8:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <prvCheckForValidListAndQueue+0x60>)
 8006dea:	4a0e      	ldr	r2, [pc, #56]	@ (8006e24 <prvCheckForValidListAndQueue+0x58>)
 8006dec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006dee:	4b10      	ldr	r3, [pc, #64]	@ (8006e30 <prvCheckForValidListAndQueue+0x64>)
 8006df0:	4a0d      	ldr	r2, [pc, #52]	@ (8006e28 <prvCheckForValidListAndQueue+0x5c>)
 8006df2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006df4:	2200      	movs	r2, #0
 8006df6:	210c      	movs	r1, #12
 8006df8:	2008      	movs	r0, #8
 8006dfa:	f7fd fd0d 	bl	8004818 <xQueueGenericCreate>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4a07      	ldr	r2, [pc, #28]	@ (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006e02:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006e04:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e0c:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4908      	ldr	r1, [pc, #32]	@ (8006e34 <prvCheckForValidListAndQueue+0x68>)
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe f962 	bl	80050dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e18:	f000 f992 	bl	8007140 <vPortExitCritical>
    }
 8006e1c:	bf00      	nop
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20000330 	.word	0x20000330
 8006e24:	20000300 	.word	0x20000300
 8006e28:	20000314 	.word	0x20000314
 8006e2c:	20000328 	.word	0x20000328
 8006e30:	2000032c 	.word	0x2000032c
 8006e34:	08008500 	.word	0x08008500

08006e38 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <pvTimerGetTimerID+0x2a>
        __asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	60fb      	str	r3, [r7, #12]
    }
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006e62:	f000 f93b 	bl	80070dc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006e6c:	f000 f968 	bl	8007140 <vPortExitCritical>

        return pvReturn;
 8006e70:	693b      	ldr	r3, [r7, #16]
    }
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b04      	subs	r3, #4
 8006e8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3b04      	subs	r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3b04      	subs	r3, #4
 8006eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006eac:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee0 <pxPortInitialiseStack+0x64>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3b14      	subs	r3, #20
 8006eb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3b04      	subs	r3, #4
 8006ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f06f 0202 	mvn.w	r2, #2
 8006eca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b20      	subs	r3, #32
 8006ed0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	08006ee5 	.word	0x08006ee5

08006ee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006eee:	4b13      	ldr	r3, [pc, #76]	@ (8006f3c <prvTaskExitError+0x58>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d00b      	beq.n	8006f10 <prvTaskExitError+0x2c>
        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
    }
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <prvTaskExitError+0x28>
        __asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60bb      	str	r3, [r7, #8]
    }
 8006f22:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006f24:	bf00      	nop
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0fc      	beq.n	8006f26 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000002c 	.word	0x2000002c

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	20000210 	.word	0x20000210
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f68:	4808      	ldr	r0, [pc, #32]	@ (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
 8006f8a:	0000      	.short	0x0000
 8006f8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop

08006f94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f9a:	4b47      	ldr	r3, [pc, #284]	@ (80070b8 <xPortStartScheduler+0x124>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a47      	ldr	r2, [pc, #284]	@ (80070bc <xPortStartScheduler+0x128>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d10b      	bne.n	8006fbc <xPortStartScheduler+0x28>
        __asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	613b      	str	r3, [r7, #16]
    }
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80070b8 <xPortStartScheduler+0x124>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80070c0 <xPortStartScheduler+0x12c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10b      	bne.n	8006fde <xPortStartScheduler+0x4a>
        __asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60fb      	str	r3, [r7, #12]
    }
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <xPortStartScheduler+0x130>)
 8006fe0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	22ff      	movs	r2, #255	@ 0xff
 8006fee:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007000:	b2da      	uxtb	r2, r3
 8007002:	4b31      	ldr	r3, [pc, #196]	@ (80070c8 <xPortStartScheduler+0x134>)
 8007004:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007006:	4b31      	ldr	r3, [pc, #196]	@ (80070cc <xPortStartScheduler+0x138>)
 8007008:	2207      	movs	r2, #7
 800700a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800700c:	e009      	b.n	8007022 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800700e:	4b2f      	ldr	r3, [pc, #188]	@ (80070cc <xPortStartScheduler+0x138>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	4a2d      	ldr	r2, [pc, #180]	@ (80070cc <xPortStartScheduler+0x138>)
 8007016:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	b2db      	uxtb	r3, r3
 8007020:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	2b80      	cmp	r3, #128	@ 0x80
 800702c:	d0ef      	beq.n	800700e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800702e:	4b27      	ldr	r3, [pc, #156]	@ (80070cc <xPortStartScheduler+0x138>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1c3 0307 	rsb	r3, r3, #7
 8007036:	2b04      	cmp	r3, #4
 8007038:	d00b      	beq.n	8007052 <xPortStartScheduler+0xbe>
        __asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60bb      	str	r3, [r7, #8]
    }
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007052:	4b1e      	ldr	r3, [pc, #120]	@ (80070cc <xPortStartScheduler+0x138>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	4a1c      	ldr	r2, [pc, #112]	@ (80070cc <xPortStartScheduler+0x138>)
 800705a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800705c:	4b1b      	ldr	r3, [pc, #108]	@ (80070cc <xPortStartScheduler+0x138>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007064:	4a19      	ldr	r2, [pc, #100]	@ (80070cc <xPortStartScheduler+0x138>)
 8007066:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007070:	4b17      	ldr	r3, [pc, #92]	@ (80070d0 <xPortStartScheduler+0x13c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a16      	ldr	r2, [pc, #88]	@ (80070d0 <xPortStartScheduler+0x13c>)
 8007076:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800707a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800707c:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <xPortStartScheduler+0x13c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a13      	ldr	r2, [pc, #76]	@ (80070d0 <xPortStartScheduler+0x13c>)
 8007082:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007086:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007088:	f000 f8e0 	bl	800724c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800708c:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <xPortStartScheduler+0x140>)
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007092:	f000 f8ff 	bl	8007294 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007096:	4b10      	ldr	r3, [pc, #64]	@ (80070d8 <xPortStartScheduler+0x144>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a0f      	ldr	r2, [pc, #60]	@ (80070d8 <xPortStartScheduler+0x144>)
 800709c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80070a2:	f7ff ff61 	bl	8006f68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80070a6:	f7fe fc99 	bl	80059dc <vTaskSwitchContext>
    prvTaskExitError();
 80070aa:	f7ff ff1b 	bl	8006ee4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed00 	.word	0xe000ed00
 80070bc:	410fc271 	.word	0x410fc271
 80070c0:	410fc270 	.word	0x410fc270
 80070c4:	e000e400 	.word	0xe000e400
 80070c8:	2000033c 	.word	0x2000033c
 80070cc:	20000340 	.word	0x20000340
 80070d0:	e000ed20 	.word	0xe000ed20
 80070d4:	2000002c 	.word	0x2000002c
 80070d8:	e000ef34 	.word	0xe000ef34

080070dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
        __asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	607b      	str	r3, [r7, #4]
    }
 80070f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80070f6:	4b10      	ldr	r3, [pc, #64]	@ (8007138 <vPortEnterCritical+0x5c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007138 <vPortEnterCritical+0x5c>)
 80070fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007100:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <vPortEnterCritical+0x5c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d110      	bne.n	800712a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007108:	4b0c      	ldr	r3, [pc, #48]	@ (800713c <vPortEnterCritical+0x60>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <vPortEnterCritical+0x4e>
        __asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	603b      	str	r3, [r7, #0]
    }
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <vPortEnterCritical+0x4a>
    }
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	2000002c 	.word	0x2000002c
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007146:	4b12      	ldr	r3, [pc, #72]	@ (8007190 <vPortExitCritical+0x50>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10b      	bne.n	8007166 <vPortExitCritical+0x26>
        __asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
    }
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007166:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <vPortExitCritical+0x50>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	4a08      	ldr	r2, [pc, #32]	@ (8007190 <vPortExitCritical+0x50>)
 800716e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007170:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <vPortExitCritical+0x50>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <vPortExitCritical+0x44>
 8007178:	2300      	movs	r3, #0
 800717a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	f383 8811 	msr	BASEPRI, r3
    }
 8007182:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	2000002c 	.word	0x2000002c
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7fe fc04 	bl	80059dc <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	20000210 	.word	0x20000210
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
        __asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
    }
 8007220:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007222:	f7fe fac3 	bl	80057ac <xTaskIncrementTick>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <SysTick_Handler+0x40>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
    }
 800723e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007250:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007256:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <vPortSetupTimerInterrupt+0x38>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800725c:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <vPortSetupTimerInterrupt+0x3c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0a      	ldr	r2, [pc, #40]	@ (800728c <vPortSetupTimerInterrupt+0x40>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	4a09      	ldr	r2, [pc, #36]	@ (8007290 <vPortSetupTimerInterrupt+0x44>)
 800726a:	3b01      	subs	r3, #1
 800726c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726e:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000e010 	.word	0xe000e010
 8007284:	e000e018 	.word	0xe000e018
 8007288:	2000001c 	.word	0x2000001c
 800728c:	10624dd3 	.word	0x10624dd3
 8007290:	e000e014 	.word	0xe000e014

08007294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072a4 <vPortEnableVFP+0x10>
 8007298:	6801      	ldr	r1, [r0, #0]
 800729a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800729e:	6001      	str	r1, [r0, #0]
 80072a0:	4770      	bx	lr
 80072a2:	0000      	.short	0x0000
 80072a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop

080072ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80072b2:	f3ef 8305 	mrs	r3, IPSR
 80072b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d915      	bls.n	80072ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072be:	4a18      	ldr	r2, [pc, #96]	@ (8007320 <vPortValidateInterruptPriority+0x74>)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072c8:	4b16      	ldr	r3, [pc, #88]	@ (8007324 <vPortValidateInterruptPriority+0x78>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	7afa      	ldrb	r2, [r7, #11]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d20b      	bcs.n	80072ea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	607b      	str	r3, [r7, #4]
    }
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <vPortValidateInterruptPriority+0x7c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072f2:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <vPortValidateInterruptPriority+0x80>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d90b      	bls.n	8007312 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	603b      	str	r3, [r7, #0]
    }
 800730c:	bf00      	nop
 800730e:	bf00      	nop
 8007310:	e7fd      	b.n	800730e <vPortValidateInterruptPriority+0x62>
    }
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	e000e3f0 	.word	0xe000e3f0
 8007324:	2000033c 	.word	0x2000033c
 8007328:	e000ed0c 	.word	0xe000ed0c
 800732c:	20000340 	.word	0x20000340

08007330 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	@ 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800733c:	f7fe f910 	bl	8005560 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007340:	4b54      	ldr	r3, [pc, #336]	@ (8007494 <pvPortMalloc+0x164>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007348:	f000 f90c 	bl	8007564 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d012      	beq.n	8007378 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007352:	2208      	movs	r2, #8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	3308      	adds	r3, #8
 800735e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	43db      	mvns	r3, r3
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d804      	bhi.n	8007374 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	4413      	add	r3, r2
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	e001      	b.n	8007378 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	db71      	blt.n	8007462 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d06e      	beq.n	8007462 <pvPortMalloc+0x132>
 8007384:	4b44      	ldr	r3, [pc, #272]	@ (8007498 <pvPortMalloc+0x168>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d869      	bhi.n	8007462 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800738e:	4b43      	ldr	r3, [pc, #268]	@ (800749c <pvPortMalloc+0x16c>)
 8007390:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007392:	4b42      	ldr	r3, [pc, #264]	@ (800749c <pvPortMalloc+0x16c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007398:	e004      	b.n	80073a4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d903      	bls.n	80073b6 <pvPortMalloc+0x86>
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f1      	bne.n	800739a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <pvPortMalloc+0x164>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073bc:	429a      	cmp	r2, r3
 80073be:	d050      	beq.n	8007462 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2208      	movs	r2, #8
 80073c6:	4413      	add	r3, r2
 80073c8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	2308      	movs	r3, #8
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	429a      	cmp	r2, r3
 80073e0:	d920      	bls.n	8007424 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <pvPortMalloc+0xdc>
        __asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	613b      	str	r3, [r7, #16]
    }
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	1ad2      	subs	r2, r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800741e:	6978      	ldr	r0, [r7, #20]
 8007420:	f000 f8fc 	bl	800761c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007424:	4b1c      	ldr	r3, [pc, #112]	@ (8007498 <pvPortMalloc+0x168>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	4a1a      	ldr	r2, [pc, #104]	@ (8007498 <pvPortMalloc+0x168>)
 8007430:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007432:	4b19      	ldr	r3, [pc, #100]	@ (8007498 <pvPortMalloc+0x168>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b1a      	ldr	r3, [pc, #104]	@ (80074a0 <pvPortMalloc+0x170>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d203      	bcs.n	8007446 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800743e:	4b16      	ldr	r3, [pc, #88]	@ (8007498 <pvPortMalloc+0x168>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <pvPortMalloc+0x170>)
 8007444:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007458:	4b12      	ldr	r3, [pc, #72]	@ (80074a4 <pvPortMalloc+0x174>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	4a11      	ldr	r2, [pc, #68]	@ (80074a4 <pvPortMalloc+0x174>)
 8007460:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007462:	f7fe f88b 	bl	800557c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <pvPortMalloc+0x158>
        __asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
    }
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	e7fd      	b.n	8007484 <pvPortMalloc+0x154>
    return pvReturn;
 8007488:	69fb      	ldr	r3, [r7, #28]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3728      	adds	r7, #40	@ 0x28
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	2000534c 	.word	0x2000534c
 8007498:	20005350 	.word	0x20005350
 800749c:	20005344 	.word	0x20005344
 80074a0:	20005354 	.word	0x20005354
 80074a4:	20005358 	.word	0x20005358

080074a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d04b      	beq.n	8007552 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80074ba:	2308      	movs	r3, #8
 80074bc:	425b      	negs	r3, r3
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4413      	add	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	db0b      	blt.n	80074e8 <vPortFree+0x40>
        __asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
    }
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <vPortFree+0x60>
        __asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60bb      	str	r3, [r7, #8]
    }
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	0fdb      	lsrs	r3, r3, #31
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01c      	beq.n	8007552 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d118      	bne.n	8007552 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800752c:	f7fe f818 	bl	8005560 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	4b09      	ldr	r3, [pc, #36]	@ (800755c <vPortFree+0xb4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4413      	add	r3, r2
 800753a:	4a08      	ldr	r2, [pc, #32]	@ (800755c <vPortFree+0xb4>)
 800753c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800753e:	6938      	ldr	r0, [r7, #16]
 8007540:	f000 f86c 	bl	800761c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007544:	4b06      	ldr	r3, [pc, #24]	@ (8007560 <vPortFree+0xb8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a05      	ldr	r2, [pc, #20]	@ (8007560 <vPortFree+0xb8>)
 800754c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800754e:	f7fe f815 	bl	800557c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007552:	bf00      	nop
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20005350 	.word	0x20005350
 8007560:	2000535c 	.word	0x2000535c

08007564 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800756a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800756e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007570:	4b25      	ldr	r3, [pc, #148]	@ (8007608 <prvHeapInit+0xa4>)
 8007572:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3307      	adds	r3, #7
 8007582:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0307 	bic.w	r3, r3, #7
 800758a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <prvHeapInit+0xa4>)
 8007594:	4413      	add	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800759c:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <prvHeapInit+0xa8>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80075a2:	4b1a      	ldr	r3, [pc, #104]	@ (800760c <prvHeapInit+0xa8>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4413      	add	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80075b0:	2208      	movs	r2, #8
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0307 	bic.w	r3, r3, #7
 80075be:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a13      	ldr	r2, [pc, #76]	@ (8007610 <prvHeapInit+0xac>)
 80075c4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80075c6:	4b12      	ldr	r3, [pc, #72]	@ (8007610 <prvHeapInit+0xac>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80075ce:	4b10      	ldr	r3, [pc, #64]	@ (8007610 <prvHeapInit+0xac>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	1ad2      	subs	r2, r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <prvHeapInit+0xac>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4a08      	ldr	r2, [pc, #32]	@ (8007614 <prvHeapInit+0xb0>)
 80075f2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4a07      	ldr	r2, [pc, #28]	@ (8007618 <prvHeapInit+0xb4>)
 80075fa:	6013      	str	r3, [r2, #0]
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	20000344 	.word	0x20000344
 800760c:	20005344 	.word	0x20005344
 8007610:	2000534c 	.word	0x2000534c
 8007614:	20005354 	.word	0x20005354
 8007618:	20005350 	.word	0x20005350

0800761c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007624:	4b28      	ldr	r3, [pc, #160]	@ (80076c8 <prvInsertBlockIntoFreeList+0xac>)
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	e002      	b.n	8007630 <prvInsertBlockIntoFreeList+0x14>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	429a      	cmp	r2, r3
 8007638:	d8f7      	bhi.n	800762a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	4413      	add	r3, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d108      	bne.n	800765e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	441a      	add	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	441a      	add	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d118      	bne.n	80076a4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b15      	ldr	r3, [pc, #84]	@ (80076cc <prvInsertBlockIntoFreeList+0xb0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d00d      	beq.n	800769a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e008      	b.n	80076ac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800769a:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <prvInsertBlockIntoFreeList+0xb0>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	e003      	b.n	80076ac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d002      	beq.n	80076ba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80076ba:	bf00      	nop
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20005344 	.word	0x20005344
 80076cc:	2000534c 	.word	0x2000534c

080076d0 <siprintf>:
 80076d0:	b40e      	push	{r1, r2, r3}
 80076d2:	b500      	push	{lr}
 80076d4:	b09c      	sub	sp, #112	@ 0x70
 80076d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80076d8:	9002      	str	r0, [sp, #8]
 80076da:	9006      	str	r0, [sp, #24]
 80076dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076e0:	4809      	ldr	r0, [pc, #36]	@ (8007708 <siprintf+0x38>)
 80076e2:	9107      	str	r1, [sp, #28]
 80076e4:	9104      	str	r1, [sp, #16]
 80076e6:	4909      	ldr	r1, [pc, #36]	@ (800770c <siprintf+0x3c>)
 80076e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ec:	9105      	str	r1, [sp, #20]
 80076ee:	6800      	ldr	r0, [r0, #0]
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	a902      	add	r1, sp, #8
 80076f4:	f000 f9a2 	bl	8007a3c <_svfiprintf_r>
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	b01c      	add	sp, #112	@ 0x70
 8007700:	f85d eb04 	ldr.w	lr, [sp], #4
 8007704:	b003      	add	sp, #12
 8007706:	4770      	bx	lr
 8007708:	20000030 	.word	0x20000030
 800770c:	ffff0208 	.word	0xffff0208

08007710 <memset>:
 8007710:	4402      	add	r2, r0
 8007712:	4603      	mov	r3, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <__errno>:
 8007720:	4b01      	ldr	r3, [pc, #4]	@ (8007728 <__errno+0x8>)
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000030 	.word	0x20000030

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	@ (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	@ (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	@ (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	@ (8007770 <__libc_init_array+0x44>)
 8007740:	f000 fc66 	bl	8008010 <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	0800855c 	.word	0x0800855c
 8007768:	0800855c 	.word	0x0800855c
 800776c:	0800855c 	.word	0x0800855c
 8007770:	08008560 	.word	0x08008560

08007774 <__retarget_lock_acquire_recursive>:
 8007774:	4770      	bx	lr

08007776 <__retarget_lock_release_recursive>:
 8007776:	4770      	bx	lr

08007778 <memcpy>:
 8007778:	440a      	add	r2, r1
 800777a:	4291      	cmp	r1, r2
 800777c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007780:	d100      	bne.n	8007784 <memcpy+0xc>
 8007782:	4770      	bx	lr
 8007784:	b510      	push	{r4, lr}
 8007786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800778e:	4291      	cmp	r1, r2
 8007790:	d1f9      	bne.n	8007786 <memcpy+0xe>
 8007792:	bd10      	pop	{r4, pc}

08007794 <_free_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4605      	mov	r5, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	d041      	beq.n	8007820 <_free_r+0x8c>
 800779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a0:	1f0c      	subs	r4, r1, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	18e4      	addlt	r4, r4, r3
 80077a8:	f000 f8e0 	bl	800796c <__malloc_lock>
 80077ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007824 <_free_r+0x90>)
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	b933      	cbnz	r3, 80077c0 <_free_r+0x2c>
 80077b2:	6063      	str	r3, [r4, #4]
 80077b4:	6014      	str	r4, [r2, #0]
 80077b6:	4628      	mov	r0, r5
 80077b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077bc:	f000 b8dc 	b.w	8007978 <__malloc_unlock>
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	d908      	bls.n	80077d6 <_free_r+0x42>
 80077c4:	6820      	ldr	r0, [r4, #0]
 80077c6:	1821      	adds	r1, r4, r0
 80077c8:	428b      	cmp	r3, r1
 80077ca:	bf01      	itttt	eq
 80077cc:	6819      	ldreq	r1, [r3, #0]
 80077ce:	685b      	ldreq	r3, [r3, #4]
 80077d0:	1809      	addeq	r1, r1, r0
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	e7ed      	b.n	80077b2 <_free_r+0x1e>
 80077d6:	461a      	mov	r2, r3
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	b10b      	cbz	r3, 80077e0 <_free_r+0x4c>
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d9fa      	bls.n	80077d6 <_free_r+0x42>
 80077e0:	6811      	ldr	r1, [r2, #0]
 80077e2:	1850      	adds	r0, r2, r1
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d10b      	bne.n	8007800 <_free_r+0x6c>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	4401      	add	r1, r0
 80077ec:	1850      	adds	r0, r2, r1
 80077ee:	4283      	cmp	r3, r0
 80077f0:	6011      	str	r1, [r2, #0]
 80077f2:	d1e0      	bne.n	80077b6 <_free_r+0x22>
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	6053      	str	r3, [r2, #4]
 80077fa:	4408      	add	r0, r1
 80077fc:	6010      	str	r0, [r2, #0]
 80077fe:	e7da      	b.n	80077b6 <_free_r+0x22>
 8007800:	d902      	bls.n	8007808 <_free_r+0x74>
 8007802:	230c      	movs	r3, #12
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	e7d6      	b.n	80077b6 <_free_r+0x22>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	1821      	adds	r1, r4, r0
 800780c:	428b      	cmp	r3, r1
 800780e:	bf04      	itt	eq
 8007810:	6819      	ldreq	r1, [r3, #0]
 8007812:	685b      	ldreq	r3, [r3, #4]
 8007814:	6063      	str	r3, [r4, #4]
 8007816:	bf04      	itt	eq
 8007818:	1809      	addeq	r1, r1, r0
 800781a:	6021      	streq	r1, [r4, #0]
 800781c:	6054      	str	r4, [r2, #4]
 800781e:	e7ca      	b.n	80077b6 <_free_r+0x22>
 8007820:	bd38      	pop	{r3, r4, r5, pc}
 8007822:	bf00      	nop
 8007824:	200054a4 	.word	0x200054a4

08007828 <sbrk_aligned>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4e0f      	ldr	r6, [pc, #60]	@ (8007868 <sbrk_aligned+0x40>)
 800782c:	460c      	mov	r4, r1
 800782e:	6831      	ldr	r1, [r6, #0]
 8007830:	4605      	mov	r5, r0
 8007832:	b911      	cbnz	r1, 800783a <sbrk_aligned+0x12>
 8007834:	f000 fba6 	bl	8007f84 <_sbrk_r>
 8007838:	6030      	str	r0, [r6, #0]
 800783a:	4621      	mov	r1, r4
 800783c:	4628      	mov	r0, r5
 800783e:	f000 fba1 	bl	8007f84 <_sbrk_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d103      	bne.n	800784e <sbrk_aligned+0x26>
 8007846:	f04f 34ff 	mov.w	r4, #4294967295
 800784a:	4620      	mov	r0, r4
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d0f8      	beq.n	800784a <sbrk_aligned+0x22>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4628      	mov	r0, r5
 800785c:	f000 fb92 	bl	8007f84 <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d1f2      	bne.n	800784a <sbrk_aligned+0x22>
 8007864:	e7ef      	b.n	8007846 <sbrk_aligned+0x1e>
 8007866:	bf00      	nop
 8007868:	200054a0 	.word	0x200054a0

0800786c <_malloc_r>:
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007870:	1ccd      	adds	r5, r1, #3
 8007872:	f025 0503 	bic.w	r5, r5, #3
 8007876:	3508      	adds	r5, #8
 8007878:	2d0c      	cmp	r5, #12
 800787a:	bf38      	it	cc
 800787c:	250c      	movcc	r5, #12
 800787e:	2d00      	cmp	r5, #0
 8007880:	4606      	mov	r6, r0
 8007882:	db01      	blt.n	8007888 <_malloc_r+0x1c>
 8007884:	42a9      	cmp	r1, r5
 8007886:	d904      	bls.n	8007892 <_malloc_r+0x26>
 8007888:	230c      	movs	r3, #12
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	2000      	movs	r0, #0
 800788e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007968 <_malloc_r+0xfc>
 8007896:	f000 f869 	bl	800796c <__malloc_lock>
 800789a:	f8d8 3000 	ldr.w	r3, [r8]
 800789e:	461c      	mov	r4, r3
 80078a0:	bb44      	cbnz	r4, 80078f4 <_malloc_r+0x88>
 80078a2:	4629      	mov	r1, r5
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffbf 	bl	8007828 <sbrk_aligned>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	4604      	mov	r4, r0
 80078ae:	d158      	bne.n	8007962 <_malloc_r+0xf6>
 80078b0:	f8d8 4000 	ldr.w	r4, [r8]
 80078b4:	4627      	mov	r7, r4
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	d143      	bne.n	8007942 <_malloc_r+0xd6>
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	d04b      	beq.n	8007956 <_malloc_r+0xea>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	4639      	mov	r1, r7
 80078c2:	4630      	mov	r0, r6
 80078c4:	eb04 0903 	add.w	r9, r4, r3
 80078c8:	f000 fb5c 	bl	8007f84 <_sbrk_r>
 80078cc:	4581      	cmp	r9, r0
 80078ce:	d142      	bne.n	8007956 <_malloc_r+0xea>
 80078d0:	6821      	ldr	r1, [r4, #0]
 80078d2:	1a6d      	subs	r5, r5, r1
 80078d4:	4629      	mov	r1, r5
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff ffa6 	bl	8007828 <sbrk_aligned>
 80078dc:	3001      	adds	r0, #1
 80078de:	d03a      	beq.n	8007956 <_malloc_r+0xea>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	442b      	add	r3, r5
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	bb62      	cbnz	r2, 8007948 <_malloc_r+0xdc>
 80078ee:	f8c8 7000 	str.w	r7, [r8]
 80078f2:	e00f      	b.n	8007914 <_malloc_r+0xa8>
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	1b52      	subs	r2, r2, r5
 80078f8:	d420      	bmi.n	800793c <_malloc_r+0xd0>
 80078fa:	2a0b      	cmp	r2, #11
 80078fc:	d917      	bls.n	800792e <_malloc_r+0xc2>
 80078fe:	1961      	adds	r1, r4, r5
 8007900:	42a3      	cmp	r3, r4
 8007902:	6025      	str	r5, [r4, #0]
 8007904:	bf18      	it	ne
 8007906:	6059      	strne	r1, [r3, #4]
 8007908:	6863      	ldr	r3, [r4, #4]
 800790a:	bf08      	it	eq
 800790c:	f8c8 1000 	streq.w	r1, [r8]
 8007910:	5162      	str	r2, [r4, r5]
 8007912:	604b      	str	r3, [r1, #4]
 8007914:	4630      	mov	r0, r6
 8007916:	f000 f82f 	bl	8007978 <__malloc_unlock>
 800791a:	f104 000b 	add.w	r0, r4, #11
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	f020 0007 	bic.w	r0, r0, #7
 8007924:	1ac2      	subs	r2, r0, r3
 8007926:	bf1c      	itt	ne
 8007928:	1a1b      	subne	r3, r3, r0
 800792a:	50a3      	strne	r3, [r4, r2]
 800792c:	e7af      	b.n	800788e <_malloc_r+0x22>
 800792e:	6862      	ldr	r2, [r4, #4]
 8007930:	42a3      	cmp	r3, r4
 8007932:	bf0c      	ite	eq
 8007934:	f8c8 2000 	streq.w	r2, [r8]
 8007938:	605a      	strne	r2, [r3, #4]
 800793a:	e7eb      	b.n	8007914 <_malloc_r+0xa8>
 800793c:	4623      	mov	r3, r4
 800793e:	6864      	ldr	r4, [r4, #4]
 8007940:	e7ae      	b.n	80078a0 <_malloc_r+0x34>
 8007942:	463c      	mov	r4, r7
 8007944:	687f      	ldr	r7, [r7, #4]
 8007946:	e7b6      	b.n	80078b6 <_malloc_r+0x4a>
 8007948:	461a      	mov	r2, r3
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	42a3      	cmp	r3, r4
 800794e:	d1fb      	bne.n	8007948 <_malloc_r+0xdc>
 8007950:	2300      	movs	r3, #0
 8007952:	6053      	str	r3, [r2, #4]
 8007954:	e7de      	b.n	8007914 <_malloc_r+0xa8>
 8007956:	230c      	movs	r3, #12
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	4630      	mov	r0, r6
 800795c:	f000 f80c 	bl	8007978 <__malloc_unlock>
 8007960:	e794      	b.n	800788c <_malloc_r+0x20>
 8007962:	6005      	str	r5, [r0, #0]
 8007964:	e7d6      	b.n	8007914 <_malloc_r+0xa8>
 8007966:	bf00      	nop
 8007968:	200054a4 	.word	0x200054a4

0800796c <__malloc_lock>:
 800796c:	4801      	ldr	r0, [pc, #4]	@ (8007974 <__malloc_lock+0x8>)
 800796e:	f7ff bf01 	b.w	8007774 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	2000549c 	.word	0x2000549c

08007978 <__malloc_unlock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_unlock+0x8>)
 800797a:	f7ff befc 	b.w	8007776 <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	2000549c 	.word	0x2000549c

08007984 <__ssputs_r>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	688e      	ldr	r6, [r1, #8]
 800798a:	461f      	mov	r7, r3
 800798c:	42be      	cmp	r6, r7
 800798e:	680b      	ldr	r3, [r1, #0]
 8007990:	4682      	mov	sl, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4690      	mov	r8, r2
 8007996:	d82d      	bhi.n	80079f4 <__ssputs_r+0x70>
 8007998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800799c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079a0:	d026      	beq.n	80079f0 <__ssputs_r+0x6c>
 80079a2:	6965      	ldr	r5, [r4, #20]
 80079a4:	6909      	ldr	r1, [r1, #16]
 80079a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079aa:	eba3 0901 	sub.w	r9, r3, r1
 80079ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b2:	1c7b      	adds	r3, r7, #1
 80079b4:	444b      	add	r3, r9
 80079b6:	106d      	asrs	r5, r5, #1
 80079b8:	429d      	cmp	r5, r3
 80079ba:	bf38      	it	cc
 80079bc:	461d      	movcc	r5, r3
 80079be:	0553      	lsls	r3, r2, #21
 80079c0:	d527      	bpl.n	8007a12 <__ssputs_r+0x8e>
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7ff ff52 	bl	800786c <_malloc_r>
 80079c8:	4606      	mov	r6, r0
 80079ca:	b360      	cbz	r0, 8007a26 <__ssputs_r+0xa2>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	464a      	mov	r2, r9
 80079d0:	f7ff fed2 	bl	8007778 <memcpy>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	6126      	str	r6, [r4, #16]
 80079e2:	6165      	str	r5, [r4, #20]
 80079e4:	444e      	add	r6, r9
 80079e6:	eba5 0509 	sub.w	r5, r5, r9
 80079ea:	6026      	str	r6, [r4, #0]
 80079ec:	60a5      	str	r5, [r4, #8]
 80079ee:	463e      	mov	r6, r7
 80079f0:	42be      	cmp	r6, r7
 80079f2:	d900      	bls.n	80079f6 <__ssputs_r+0x72>
 80079f4:	463e      	mov	r6, r7
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	4632      	mov	r2, r6
 80079fa:	4641      	mov	r1, r8
 80079fc:	f000 faa8 	bl	8007f50 <memmove>
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	1b9b      	subs	r3, r3, r6
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	4433      	add	r3, r6
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a12:	462a      	mov	r2, r5
 8007a14:	f000 fac6 	bl	8007fa4 <_realloc_r>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1e0      	bne.n	80079e0 <__ssputs_r+0x5c>
 8007a1e:	6921      	ldr	r1, [r4, #16]
 8007a20:	4650      	mov	r0, sl
 8007a22:	f7ff feb7 	bl	8007794 <_free_r>
 8007a26:	230c      	movs	r3, #12
 8007a28:	f8ca 3000 	str.w	r3, [sl]
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e7e9      	b.n	8007a0e <__ssputs_r+0x8a>
	...

08007a3c <_svfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	4698      	mov	r8, r3
 8007a42:	898b      	ldrh	r3, [r1, #12]
 8007a44:	061b      	lsls	r3, r3, #24
 8007a46:	b09d      	sub	sp, #116	@ 0x74
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	d510      	bpl.n	8007a72 <_svfiprintf_r+0x36>
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	b973      	cbnz	r3, 8007a72 <_svfiprintf_r+0x36>
 8007a54:	2140      	movs	r1, #64	@ 0x40
 8007a56:	f7ff ff09 	bl	800786c <_malloc_r>
 8007a5a:	6028      	str	r0, [r5, #0]
 8007a5c:	6128      	str	r0, [r5, #16]
 8007a5e:	b930      	cbnz	r0, 8007a6e <_svfiprintf_r+0x32>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b01d      	add	sp, #116	@ 0x74
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	2340      	movs	r3, #64	@ 0x40
 8007a70:	616b      	str	r3, [r5, #20]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a76:	2320      	movs	r3, #32
 8007a78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	2330      	movs	r3, #48	@ 0x30
 8007a82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c20 <_svfiprintf_r+0x1e4>
 8007a86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a8a:	f04f 0901 	mov.w	r9, #1
 8007a8e:	4623      	mov	r3, r4
 8007a90:	469a      	mov	sl, r3
 8007a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a96:	b10a      	cbz	r2, 8007a9c <_svfiprintf_r+0x60>
 8007a98:	2a25      	cmp	r2, #37	@ 0x25
 8007a9a:	d1f9      	bne.n	8007a90 <_svfiprintf_r+0x54>
 8007a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa0:	d00b      	beq.n	8007aba <_svfiprintf_r+0x7e>
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ff6b 	bl	8007984 <__ssputs_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f000 80a7 	beq.w	8007c02 <_svfiprintf_r+0x1c6>
 8007ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab6:	445a      	add	r2, fp
 8007ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007aba:	f89a 3000 	ldrb.w	r3, [sl]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 809f 	beq.w	8007c02 <_svfiprintf_r+0x1c6>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ace:	f10a 0a01 	add.w	sl, sl, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	9307      	str	r3, [sp, #28]
 8007ad6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ada:	931a      	str	r3, [sp, #104]	@ 0x68
 8007adc:	4654      	mov	r4, sl
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae4:	484e      	ldr	r0, [pc, #312]	@ (8007c20 <_svfiprintf_r+0x1e4>)
 8007ae6:	f7f8 fb93 	bl	8000210 <memchr>
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	b9d8      	cbnz	r0, 8007b26 <_svfiprintf_r+0xea>
 8007aee:	06d0      	lsls	r0, r2, #27
 8007af0:	bf44      	itt	mi
 8007af2:	2320      	movmi	r3, #32
 8007af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007af8:	0711      	lsls	r1, r2, #28
 8007afa:	bf44      	itt	mi
 8007afc:	232b      	movmi	r3, #43	@ 0x2b
 8007afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b08:	d015      	beq.n	8007b36 <_svfiprintf_r+0xfa>
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	4654      	mov	r4, sl
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f04f 0c0a 	mov.w	ip, #10
 8007b14:	4621      	mov	r1, r4
 8007b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1a:	3b30      	subs	r3, #48	@ 0x30
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d94b      	bls.n	8007bb8 <_svfiprintf_r+0x17c>
 8007b20:	b1b0      	cbz	r0, 8007b50 <_svfiprintf_r+0x114>
 8007b22:	9207      	str	r2, [sp, #28]
 8007b24:	e014      	b.n	8007b50 <_svfiprintf_r+0x114>
 8007b26:	eba0 0308 	sub.w	r3, r0, r8
 8007b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	46a2      	mov	sl, r4
 8007b34:	e7d2      	b.n	8007adc <_svfiprintf_r+0xa0>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbb      	ittet	lt
 8007b42:	425b      	neglt	r3, r3
 8007b44:	f042 0202 	orrlt.w	r2, r2, #2
 8007b48:	9307      	strge	r3, [sp, #28]
 8007b4a:	9307      	strlt	r3, [sp, #28]
 8007b4c:	bfb8      	it	lt
 8007b4e:	9204      	strlt	r2, [sp, #16]
 8007b50:	7823      	ldrb	r3, [r4, #0]
 8007b52:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b54:	d10a      	bne.n	8007b6c <_svfiprintf_r+0x130>
 8007b56:	7863      	ldrb	r3, [r4, #1]
 8007b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b5a:	d132      	bne.n	8007bc2 <_svfiprintf_r+0x186>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9203      	str	r2, [sp, #12]
 8007b64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b68:	3402      	adds	r4, #2
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c30 <_svfiprintf_r+0x1f4>
 8007b70:	7821      	ldrb	r1, [r4, #0]
 8007b72:	2203      	movs	r2, #3
 8007b74:	4650      	mov	r0, sl
 8007b76:	f7f8 fb4b 	bl	8000210 <memchr>
 8007b7a:	b138      	cbz	r0, 8007b8c <_svfiprintf_r+0x150>
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	eba0 000a 	sub.w	r0, r0, sl
 8007b82:	2240      	movs	r2, #64	@ 0x40
 8007b84:	4082      	lsls	r2, r0
 8007b86:	4313      	orrs	r3, r2
 8007b88:	3401      	adds	r4, #1
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	4824      	ldr	r0, [pc, #144]	@ (8007c24 <_svfiprintf_r+0x1e8>)
 8007b92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b96:	2206      	movs	r2, #6
 8007b98:	f7f8 fb3a 	bl	8000210 <memchr>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d036      	beq.n	8007c0e <_svfiprintf_r+0x1d2>
 8007ba0:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <_svfiprintf_r+0x1ec>)
 8007ba2:	bb1b      	cbnz	r3, 8007bec <_svfiprintf_r+0x1b0>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	f023 0307 	bic.w	r3, r3, #7
 8007bac:	3308      	adds	r3, #8
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	4433      	add	r3, r6
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	e76a      	b.n	8007a8e <_svfiprintf_r+0x52>
 8007bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7a8      	b.n	8007b14 <_svfiprintf_r+0xd8>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	3401      	adds	r4, #1
 8007bc6:	9305      	str	r3, [sp, #20]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f04f 0c0a 	mov.w	ip, #10
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd4:	3a30      	subs	r2, #48	@ 0x30
 8007bd6:	2a09      	cmp	r2, #9
 8007bd8:	d903      	bls.n	8007be2 <_svfiprintf_r+0x1a6>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c6      	beq.n	8007b6c <_svfiprintf_r+0x130>
 8007bde:	9105      	str	r1, [sp, #20]
 8007be0:	e7c4      	b.n	8007b6c <_svfiprintf_r+0x130>
 8007be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be6:	4604      	mov	r4, r0
 8007be8:	2301      	movs	r3, #1
 8007bea:	e7f0      	b.n	8007bce <_svfiprintf_r+0x192>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <_svfiprintf_r+0x1f0>)
 8007bf4:	a904      	add	r1, sp, #16
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f3af 8000 	nop.w
 8007bfc:	1c42      	adds	r2, r0, #1
 8007bfe:	4606      	mov	r6, r0
 8007c00:	d1d6      	bne.n	8007bb0 <_svfiprintf_r+0x174>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	065b      	lsls	r3, r3, #25
 8007c06:	f53f af2d 	bmi.w	8007a64 <_svfiprintf_r+0x28>
 8007c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c0c:	e72c      	b.n	8007a68 <_svfiprintf_r+0x2c>
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	462a      	mov	r2, r5
 8007c14:	4b05      	ldr	r3, [pc, #20]	@ (8007c2c <_svfiprintf_r+0x1f0>)
 8007c16:	a904      	add	r1, sp, #16
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f000 f879 	bl	8007d10 <_printf_i>
 8007c1e:	e7ed      	b.n	8007bfc <_svfiprintf_r+0x1c0>
 8007c20:	08008520 	.word	0x08008520
 8007c24:	0800852a 	.word	0x0800852a
 8007c28:	00000000 	.word	0x00000000
 8007c2c:	08007985 	.word	0x08007985
 8007c30:	08008526 	.word	0x08008526

08007c34 <_printf_common>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	4616      	mov	r6, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	688a      	ldr	r2, [r1, #8]
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	bfb8      	it	lt
 8007c48:	4613      	movlt	r3, r2
 8007c4a:	6033      	str	r3, [r6, #0]
 8007c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c50:	4607      	mov	r7, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	b10a      	cbz	r2, 8007c5a <_printf_common+0x26>
 8007c56:	3301      	adds	r3, #1
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	0699      	lsls	r1, r3, #26
 8007c5e:	bf42      	ittt	mi
 8007c60:	6833      	ldrmi	r3, [r6, #0]
 8007c62:	3302      	addmi	r3, #2
 8007c64:	6033      	strmi	r3, [r6, #0]
 8007c66:	6825      	ldr	r5, [r4, #0]
 8007c68:	f015 0506 	ands.w	r5, r5, #6
 8007c6c:	d106      	bne.n	8007c7c <_printf_common+0x48>
 8007c6e:	f104 0a19 	add.w	sl, r4, #25
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	6832      	ldr	r2, [r6, #0]
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dc26      	bgt.n	8007cca <_printf_common+0x96>
 8007c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	3b00      	subs	r3, #0
 8007c84:	bf18      	it	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	0692      	lsls	r2, r2, #26
 8007c8a:	d42b      	bmi.n	8007ce4 <_printf_common+0xb0>
 8007c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c90:	4641      	mov	r1, r8
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c8      	blx	r9
 8007c96:	3001      	adds	r0, #1
 8007c98:	d01e      	beq.n	8007cd8 <_printf_common+0xa4>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	6922      	ldr	r2, [r4, #16]
 8007c9e:	f003 0306 	and.w	r3, r3, #6
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	bf02      	ittt	eq
 8007ca6:	68e5      	ldreq	r5, [r4, #12]
 8007ca8:	6833      	ldreq	r3, [r6, #0]
 8007caa:	1aed      	subeq	r5, r5, r3
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	bf0c      	ite	eq
 8007cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cb4:	2500      	movne	r5, #0
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	bfc4      	itt	gt
 8007cba:	1a9b      	subgt	r3, r3, r2
 8007cbc:	18ed      	addgt	r5, r5, r3
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	341a      	adds	r4, #26
 8007cc2:	42b5      	cmp	r5, r6
 8007cc4:	d11a      	bne.n	8007cfc <_printf_common+0xc8>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e008      	b.n	8007cdc <_printf_common+0xa8>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4652      	mov	r2, sl
 8007cce:	4641      	mov	r1, r8
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	47c8      	blx	r9
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d103      	bne.n	8007ce0 <_printf_common+0xac>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	e7c6      	b.n	8007c72 <_printf_common+0x3e>
 8007ce4:	18e1      	adds	r1, r4, r3
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	2030      	movs	r0, #48	@ 0x30
 8007cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cee:	4422      	add	r2, r4
 8007cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	e7c7      	b.n	8007c8c <_printf_common+0x58>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d0e6      	beq.n	8007cd8 <_printf_common+0xa4>
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7d9      	b.n	8007cc2 <_printf_common+0x8e>
	...

08007d10 <_printf_i>:
 8007d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	7e0f      	ldrb	r7, [r1, #24]
 8007d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d18:	2f78      	cmp	r7, #120	@ 0x78
 8007d1a:	4691      	mov	r9, r2
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	469a      	mov	sl, r3
 8007d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d26:	d807      	bhi.n	8007d38 <_printf_i+0x28>
 8007d28:	2f62      	cmp	r7, #98	@ 0x62
 8007d2a:	d80a      	bhi.n	8007d42 <_printf_i+0x32>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f000 80d2 	beq.w	8007ed6 <_printf_i+0x1c6>
 8007d32:	2f58      	cmp	r7, #88	@ 0x58
 8007d34:	f000 80b9 	beq.w	8007eaa <_printf_i+0x19a>
 8007d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d40:	e03a      	b.n	8007db8 <_printf_i+0xa8>
 8007d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d46:	2b15      	cmp	r3, #21
 8007d48:	d8f6      	bhi.n	8007d38 <_printf_i+0x28>
 8007d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d50 <_printf_i+0x40>)
 8007d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007d39 	.word	0x08007d39
 8007d5c:	08007d39 	.word	0x08007d39
 8007d60:	08007d39 	.word	0x08007d39
 8007d64:	08007d39 	.word	0x08007d39
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d39 	.word	0x08007d39
 8007d70:	08007d39 	.word	0x08007d39
 8007d74:	08007d39 	.word	0x08007d39
 8007d78:	08007d39 	.word	0x08007d39
 8007d7c:	08007ebd 	.word	0x08007ebd
 8007d80:	08007de7 	.word	0x08007de7
 8007d84:	08007e77 	.word	0x08007e77
 8007d88:	08007d39 	.word	0x08007d39
 8007d8c:	08007d39 	.word	0x08007d39
 8007d90:	08007edf 	.word	0x08007edf
 8007d94:	08007d39 	.word	0x08007d39
 8007d98:	08007de7 	.word	0x08007de7
 8007d9c:	08007d39 	.word	0x08007d39
 8007da0:	08007d39 	.word	0x08007d39
 8007da4:	08007e7f 	.word	0x08007e7f
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	1d1a      	adds	r2, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6032      	str	r2, [r6, #0]
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007db8:	2301      	movs	r3, #1
 8007dba:	e09d      	b.n	8007ef8 <_printf_i+0x1e8>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	6031      	str	r1, [r6, #0]
 8007dc4:	0606      	lsls	r6, r0, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xbc>
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <_printf_i+0xc4>
 8007dcc:	0645      	lsls	r5, r0, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xb8>
 8007dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	da03      	bge.n	8007de0 <_printf_i+0xd0>
 8007dd8:	232d      	movs	r3, #45	@ 0x2d
 8007dda:	426d      	negs	r5, r5
 8007ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de0:	4859      	ldr	r0, [pc, #356]	@ (8007f48 <_printf_i+0x238>)
 8007de2:	230a      	movs	r3, #10
 8007de4:	e011      	b.n	8007e0a <_printf_i+0xfa>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	0608      	lsls	r0, r1, #24
 8007dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007df0:	d402      	bmi.n	8007df8 <_printf_i+0xe8>
 8007df2:	0649      	lsls	r1, r1, #25
 8007df4:	bf48      	it	mi
 8007df6:	b2ad      	uxthmi	r5, r5
 8007df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dfa:	4853      	ldr	r0, [pc, #332]	@ (8007f48 <_printf_i+0x238>)
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	bf14      	ite	ne
 8007e00:	230a      	movne	r3, #10
 8007e02:	2308      	moveq	r3, #8
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e0a:	6866      	ldr	r6, [r4, #4]
 8007e0c:	60a6      	str	r6, [r4, #8]
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	bfa2      	ittt	ge
 8007e12:	6821      	ldrge	r1, [r4, #0]
 8007e14:	f021 0104 	bicge.w	r1, r1, #4
 8007e18:	6021      	strge	r1, [r4, #0]
 8007e1a:	b90d      	cbnz	r5, 8007e20 <_printf_i+0x110>
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	d04b      	beq.n	8007eb8 <_printf_i+0x1a8>
 8007e20:	4616      	mov	r6, r2
 8007e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e26:	fb03 5711 	mls	r7, r3, r1, r5
 8007e2a:	5dc7      	ldrb	r7, [r0, r7]
 8007e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e30:	462f      	mov	r7, r5
 8007e32:	42bb      	cmp	r3, r7
 8007e34:	460d      	mov	r5, r1
 8007e36:	d9f4      	bls.n	8007e22 <_printf_i+0x112>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10b      	bne.n	8007e54 <_printf_i+0x144>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07df      	lsls	r7, r3, #31
 8007e40:	d508      	bpl.n	8007e54 <_printf_i+0x144>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	4299      	cmp	r1, r3
 8007e48:	bfde      	ittt	le
 8007e4a:	2330      	movle	r3, #48	@ 0x30
 8007e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e54:	1b92      	subs	r2, r2, r6
 8007e56:	6122      	str	r2, [r4, #16]
 8007e58:	f8cd a000 	str.w	sl, [sp]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	aa03      	add	r2, sp, #12
 8007e60:	4621      	mov	r1, r4
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff fee6 	bl	8007c34 <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d14a      	bne.n	8007f02 <_printf_i+0x1f2>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b004      	add	sp, #16
 8007e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	4833      	ldr	r0, [pc, #204]	@ (8007f4c <_printf_i+0x23c>)
 8007e80:	2778      	movs	r7, #120	@ 0x78
 8007e82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	6831      	ldr	r1, [r6, #0]
 8007e8a:	061f      	lsls	r7, r3, #24
 8007e8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e90:	d402      	bmi.n	8007e98 <_printf_i+0x188>
 8007e92:	065f      	lsls	r7, r3, #25
 8007e94:	bf48      	it	mi
 8007e96:	b2ad      	uxthmi	r5, r5
 8007e98:	6031      	str	r1, [r6, #0]
 8007e9a:	07d9      	lsls	r1, r3, #31
 8007e9c:	bf44      	itt	mi
 8007e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea2:	6023      	strmi	r3, [r4, #0]
 8007ea4:	b11d      	cbz	r5, 8007eae <_printf_i+0x19e>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	e7ac      	b.n	8007e04 <_printf_i+0xf4>
 8007eaa:	4827      	ldr	r0, [pc, #156]	@ (8007f48 <_printf_i+0x238>)
 8007eac:	e7e9      	b.n	8007e82 <_printf_i+0x172>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f023 0320 	bic.w	r3, r3, #32
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	e7f6      	b.n	8007ea6 <_printf_i+0x196>
 8007eb8:	4616      	mov	r6, r2
 8007eba:	e7bd      	b.n	8007e38 <_printf_i+0x128>
 8007ebc:	6833      	ldr	r3, [r6, #0]
 8007ebe:	6825      	ldr	r5, [r4, #0]
 8007ec0:	6961      	ldr	r1, [r4, #20]
 8007ec2:	1d18      	adds	r0, r3, #4
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	062e      	lsls	r6, r5, #24
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	d501      	bpl.n	8007ed0 <_printf_i+0x1c0>
 8007ecc:	6019      	str	r1, [r3, #0]
 8007ece:	e002      	b.n	8007ed6 <_printf_i+0x1c6>
 8007ed0:	0668      	lsls	r0, r5, #25
 8007ed2:	d5fb      	bpl.n	8007ecc <_printf_i+0x1bc>
 8007ed4:	8019      	strh	r1, [r3, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	4616      	mov	r6, r2
 8007edc:	e7bc      	b.n	8007e58 <_printf_i+0x148>
 8007ede:	6833      	ldr	r3, [r6, #0]
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	6032      	str	r2, [r6, #0]
 8007ee4:	681e      	ldr	r6, [r3, #0]
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7f8 f990 	bl	8000210 <memchr>
 8007ef0:	b108      	cbz	r0, 8007ef6 <_printf_i+0x1e6>
 8007ef2:	1b80      	subs	r0, r0, r6
 8007ef4:	6060      	str	r0, [r4, #4]
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	2300      	movs	r3, #0
 8007efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f00:	e7aa      	b.n	8007e58 <_printf_i+0x148>
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0ad      	beq.n	8007e6c <_printf_i+0x15c>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	079b      	lsls	r3, r3, #30
 8007f14:	d413      	bmi.n	8007f3e <_printf_i+0x22e>
 8007f16:	68e0      	ldr	r0, [r4, #12]
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	4298      	cmp	r0, r3
 8007f1c:	bfb8      	it	lt
 8007f1e:	4618      	movlt	r0, r3
 8007f20:	e7a6      	b.n	8007e70 <_printf_i+0x160>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4632      	mov	r2, r6
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d09d      	beq.n	8007e6c <_printf_i+0x15c>
 8007f30:	3501      	adds	r5, #1
 8007f32:	68e3      	ldr	r3, [r4, #12]
 8007f34:	9903      	ldr	r1, [sp, #12]
 8007f36:	1a5b      	subs	r3, r3, r1
 8007f38:	42ab      	cmp	r3, r5
 8007f3a:	dcf2      	bgt.n	8007f22 <_printf_i+0x212>
 8007f3c:	e7eb      	b.n	8007f16 <_printf_i+0x206>
 8007f3e:	2500      	movs	r5, #0
 8007f40:	f104 0619 	add.w	r6, r4, #25
 8007f44:	e7f5      	b.n	8007f32 <_printf_i+0x222>
 8007f46:	bf00      	nop
 8007f48:	08008531 	.word	0x08008531
 8007f4c:	08008542 	.word	0x08008542

08007f50 <memmove>:
 8007f50:	4288      	cmp	r0, r1
 8007f52:	b510      	push	{r4, lr}
 8007f54:	eb01 0402 	add.w	r4, r1, r2
 8007f58:	d902      	bls.n	8007f60 <memmove+0x10>
 8007f5a:	4284      	cmp	r4, r0
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	d807      	bhi.n	8007f70 <memmove+0x20>
 8007f60:	1e43      	subs	r3, r0, #1
 8007f62:	42a1      	cmp	r1, r4
 8007f64:	d008      	beq.n	8007f78 <memmove+0x28>
 8007f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f6e:	e7f8      	b.n	8007f62 <memmove+0x12>
 8007f70:	4402      	add	r2, r0
 8007f72:	4601      	mov	r1, r0
 8007f74:	428a      	cmp	r2, r1
 8007f76:	d100      	bne.n	8007f7a <memmove+0x2a>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f82:	e7f7      	b.n	8007f74 <memmove+0x24>

08007f84 <_sbrk_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	@ (8007fa0 <_sbrk_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 fc52 	bl	8001838 <_sbrk>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_sbrk_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_sbrk_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20005498 	.word	0x20005498

08007fa4 <_realloc_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4615      	mov	r5, r2
 8007fac:	460c      	mov	r4, r1
 8007fae:	b921      	cbnz	r1, 8007fba <_realloc_r+0x16>
 8007fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	f7ff bc59 	b.w	800786c <_malloc_r>
 8007fba:	b92a      	cbnz	r2, 8007fc8 <_realloc_r+0x24>
 8007fbc:	f7ff fbea 	bl	8007794 <_free_r>
 8007fc0:	2400      	movs	r4, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	f000 f81a 	bl	8008000 <_malloc_usable_size_r>
 8007fcc:	4285      	cmp	r5, r0
 8007fce:	4606      	mov	r6, r0
 8007fd0:	d802      	bhi.n	8007fd8 <_realloc_r+0x34>
 8007fd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007fd6:	d8f4      	bhi.n	8007fc2 <_realloc_r+0x1e>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4640      	mov	r0, r8
 8007fdc:	f7ff fc46 	bl	800786c <_malloc_r>
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0ec      	beq.n	8007fc0 <_realloc_r+0x1c>
 8007fe6:	42b5      	cmp	r5, r6
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4621      	mov	r1, r4
 8007fec:	bf28      	it	cs
 8007fee:	4632      	movcs	r2, r6
 8007ff0:	f7ff fbc2 	bl	8007778 <memcpy>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	f7ff fbcc 	bl	8007794 <_free_r>
 8007ffc:	463c      	mov	r4, r7
 8007ffe:	e7e0      	b.n	8007fc2 <_realloc_r+0x1e>

08008000 <_malloc_usable_size_r>:
 8008000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008004:	1f18      	subs	r0, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfbc      	itt	lt
 800800a:	580b      	ldrlt	r3, [r1, r0]
 800800c:	18c0      	addlt	r0, r0, r3
 800800e:	4770      	bx	lr

08008010 <_init>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr

0800801c <_fini>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr
